-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.Film exposing (..)

import Api.Enum.PersonOrderBy
import Api.Enum.PlanetOrderBy
import Api.Enum.SpeciesOrderBy
import Api.Enum.StarshipOrderBy
import Api.Enum.VehicleOrderBy
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


type alias CharactersOptionalArguments =
    { filter : OptionalArgument Api.InputObject.PersonFilter
    , orderBy : OptionalArgument Api.Enum.PersonOrderBy.PersonOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
characters : (CharactersOptionalArguments -> CharactersOptionalArguments) -> SelectionSet decodesTo Api.Object.Person -> SelectionSet (Maybe (List decodesTo)) Api.Object.Film
characters fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodePersonFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.PersonOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "characters" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


createdAt : SelectionSet Api.ScalarCodecs.DateTime Api.Object.Film
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The name of the director of this film.
-}
director : SelectionSet (Maybe String) Api.Object.Film
director =
    Object.selectionForField "(Maybe String)" "director" [] (Decode.string |> Decode.nullable)


{-| The episode number of this film.
-}
episodeId : SelectionSet Int Api.Object.Film
episodeId =
    Object.selectionForField "Int" "episodeId" [] Decode.int


id : SelectionSet Api.ScalarCodecs.Id Api.Object.Film
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| indicates if the record is published
-}
isPublished : SelectionSet Bool Api.Object.Film
isPublished =
    Object.selectionForField "Bool" "isPublished" [] Decode.bool


{-| The opening paragraphs at the beginning of this film.
-}
openingCrawl : SelectionSet (Maybe String) Api.Object.Film
openingCrawl =
    Object.selectionForField "(Maybe String)" "openingCrawl" [] (Decode.string |> Decode.nullable)


type alias PlanetsOptionalArguments =
    { filter : OptionalArgument Api.InputObject.PlanetFilter
    , orderBy : OptionalArgument Api.Enum.PlanetOrderBy.PlanetOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
planets : (PlanetsOptionalArguments -> PlanetsOptionalArguments) -> SelectionSet decodesTo Api.Object.Planet -> SelectionSet (Maybe (List decodesTo)) Api.Object.Film
planets fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodePlanetFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.PlanetOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "planets" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


{-| The names of the producers of this film.
-}
producers : SelectionSet (Maybe (List String)) Api.Object.Film
producers =
    Object.selectionForField "(Maybe (List String))" "producers" [] (Decode.string |> Decode.list |> Decode.nullable)


{-| The ISO 8601 date format of film release at original creator country.
-}
releaseDate : SelectionSet (Maybe Api.ScalarCodecs.DateTime) Api.Object.Film
releaseDate =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "releaseDate" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


type alias SpeciesOptionalArguments =
    { filter : OptionalArgument Api.InputObject.SpeciesFilter
    , orderBy : OptionalArgument Api.Enum.SpeciesOrderBy.SpeciesOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
species : (SpeciesOptionalArguments -> SpeciesOptionalArguments) -> SelectionSet decodesTo Api.Object.Species -> SelectionSet (Maybe (List decodesTo)) Api.Object.Film
species fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeSpeciesFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.SpeciesOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "species" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


type alias StarshipsOptionalArguments =
    { filter : OptionalArgument Api.InputObject.StarshipFilter
    , orderBy : OptionalArgument Api.Enum.StarshipOrderBy.StarshipOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
starships : (StarshipsOptionalArguments -> StarshipsOptionalArguments) -> SelectionSet decodesTo Api.Object.Starship -> SelectionSet (Maybe (List decodesTo)) Api.Object.Film
starships fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeStarshipFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.StarshipOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "starships" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


{-| The title of this film
-}
title : SelectionSet String Api.Object.Film
title =
    Object.selectionForField "String" "title" [] Decode.string


updatedAt : SelectionSet Api.ScalarCodecs.DateTime Api.Object.Film
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


type alias VehiclesOptionalArguments =
    { filter : OptionalArgument Api.InputObject.VehicleFilter
    , orderBy : OptionalArgument Api.Enum.VehicleOrderBy.VehicleOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
vehicles : (VehiclesOptionalArguments -> VehiclesOptionalArguments) -> SelectionSet decodesTo Api.Object.Vehicle -> SelectionSet (Maybe (List decodesTo)) Api.Object.Film
vehicles fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeVehicleFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.VehicleOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "vehicles" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


type alias CharactersMetaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.PersonFilter
    , orderBy : OptionalArgument Api.Enum.PersonOrderBy.PersonOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Meta information about the query.

  - filter -

-}
charactersMeta_ : (CharactersMetaOptionalArguments -> CharactersMetaOptionalArguments) -> SelectionSet decodesTo Api.Object.QueryMeta_ -> SelectionSet decodesTo Api.Object.Film
charactersMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodePersonFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.PersonOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_charactersMeta" optionalArgs object_ identity


type alias PlanetsMetaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.PlanetFilter
    , orderBy : OptionalArgument Api.Enum.PlanetOrderBy.PlanetOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Meta information about the query.

  - filter -

-}
planetsMeta_ : (PlanetsMetaOptionalArguments -> PlanetsMetaOptionalArguments) -> SelectionSet decodesTo Api.Object.QueryMeta_ -> SelectionSet decodesTo Api.Object.Film
planetsMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodePlanetFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.PlanetOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_planetsMeta" optionalArgs object_ identity


type alias SpeciesMetaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.SpeciesFilter
    , orderBy : OptionalArgument Api.Enum.SpeciesOrderBy.SpeciesOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Meta information about the query.

  - filter -

-}
speciesMeta_ : (SpeciesMetaOptionalArguments -> SpeciesMetaOptionalArguments) -> SelectionSet decodesTo Api.Object.QueryMeta_ -> SelectionSet decodesTo Api.Object.Film
speciesMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeSpeciesFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.SpeciesOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_speciesMeta" optionalArgs object_ identity


type alias StarshipsMetaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.StarshipFilter
    , orderBy : OptionalArgument Api.Enum.StarshipOrderBy.StarshipOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Meta information about the query.

  - filter -

-}
starshipsMeta_ : (StarshipsMetaOptionalArguments -> StarshipsMetaOptionalArguments) -> SelectionSet decodesTo Api.Object.QueryMeta_ -> SelectionSet decodesTo Api.Object.Film
starshipsMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeStarshipFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.StarshipOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_starshipsMeta" optionalArgs object_ identity


type alias VehiclesMetaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.VehicleFilter
    , orderBy : OptionalArgument Api.Enum.VehicleOrderBy.VehicleOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Meta information about the query.

  - filter -

-}
vehiclesMeta_ : (VehiclesMetaOptionalArguments -> VehiclesMetaOptionalArguments) -> SelectionSet decodesTo Api.Object.QueryMeta_ -> SelectionSet decodesTo Api.Object.Film
vehiclesMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeVehicleFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.VehicleOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_vehiclesMeta" optionalArgs object_ identity
