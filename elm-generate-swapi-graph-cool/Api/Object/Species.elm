-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.Species exposing (..)

import Api.Enum.FilmOrderBy
import Api.Enum.PersonOrderBy
import Api.Enum.SpeciesEyeColor
import Api.Enum.SpeciesHairColor
import Api.Enum.SpeciesSkinColor
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| The average height of this species in centimeters.
-}
averageHeight : SelectionSet (Maybe Int) Api.Object.Species
averageHeight =
    Object.selectionForField "(Maybe Int)" "averageHeight" [] (Decode.int |> Decode.nullable)


{-| The average lifespan of this species in years.
-}
averageLifespan : SelectionSet (Maybe Int) Api.Object.Species
averageLifespan =
    Object.selectionForField "(Maybe Int)" "averageLifespan" [] (Decode.int |> Decode.nullable)


{-| The classification of this species, such as "mammal" or "reptile".
-}
classification : SelectionSet (Maybe String) Api.Object.Species
classification =
    Object.selectionForField "(Maybe String)" "classification" [] (Decode.string |> Decode.nullable)


createdAt : SelectionSet Api.ScalarCodecs.DateTime Api.Object.Species
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The designation of this species, such as "sentient".
-}
designation : SelectionSet (Maybe String) Api.Object.Species
designation =
    Object.selectionForField "(Maybe String)" "designation" [] (Decode.string |> Decode.nullable)


{-| The eye colors for this species, "UNKNOWN" if not known, null if this species does not typically have eyes.
-}
eyeColor : SelectionSet (Maybe (List Api.Enum.SpeciesEyeColor.SpeciesEyeColor)) Api.Object.Species
eyeColor =
    Object.selectionForField "(Maybe (List Enum.SpeciesEyeColor.SpeciesEyeColor))" "eyeColor" [] (Api.Enum.SpeciesEyeColor.decoder |> Decode.list |> Decode.nullable)


type alias FilmsOptionalArguments =
    { filter : OptionalArgument Api.InputObject.FilmFilter
    , orderBy : OptionalArgument Api.Enum.FilmOrderBy.FilmOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
films : (FilmsOptionalArguments -> FilmsOptionalArguments) -> SelectionSet decodesTo Api.Object.Film -> SelectionSet (Maybe (List decodesTo)) Api.Object.Species
films fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeFilmFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.FilmOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "films" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


{-| The hair colors for this species, "UNKNOWN" if not known, null if this species does not typically have hairs.
-}
hairColor : SelectionSet (Maybe (List Api.Enum.SpeciesHairColor.SpeciesHairColor)) Api.Object.Species
hairColor =
    Object.selectionForField "(Maybe (List Enum.SpeciesHairColor.SpeciesHairColor))" "hairColor" [] (Api.Enum.SpeciesHairColor.decoder |> Decode.list |> Decode.nullable)


id : SelectionSet Api.ScalarCodecs.Id Api.Object.Species
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| indicates if the record is published
-}
isPublished : SelectionSet Bool Api.Object.Species
isPublished =
    Object.selectionForField "Bool" "isPublished" [] Decode.bool


{-| The language commonly spoken by this species.
-}
language : SelectionSet (Maybe String) Api.Object.Species
language =
    Object.selectionForField "(Maybe String)" "language" [] (Decode.string |> Decode.nullable)


{-| The name of this species.
-}
name : SelectionSet String Api.Object.Species
name =
    Object.selectionForField "String" "name" [] Decode.string


type alias PeopleOptionalArguments =
    { filter : OptionalArgument Api.InputObject.PersonFilter
    , orderBy : OptionalArgument Api.Enum.PersonOrderBy.PersonOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
people : (PeopleOptionalArguments -> PeopleOptionalArguments) -> SelectionSet decodesTo Api.Object.Person -> SelectionSet (Maybe (List decodesTo)) Api.Object.Species
people fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodePersonFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.PersonOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "people" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


{-| The skin colors for this species, "UNKNOWN" if not known, null if this species does not typically have a skin.
-}
skinColor : SelectionSet (Maybe (List Api.Enum.SpeciesSkinColor.SpeciesSkinColor)) Api.Object.Species
skinColor =
    Object.selectionForField "(Maybe (List Enum.SpeciesSkinColor.SpeciesSkinColor))" "skinColor" [] (Api.Enum.SpeciesSkinColor.decoder |> Decode.list |> Decode.nullable)


updatedAt : SelectionSet Api.ScalarCodecs.DateTime Api.Object.Species
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


type alias FilmsMetaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.FilmFilter
    , orderBy : OptionalArgument Api.Enum.FilmOrderBy.FilmOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Meta information about the query.

  - filter -

-}
filmsMeta_ : (FilmsMetaOptionalArguments -> FilmsMetaOptionalArguments) -> SelectionSet decodesTo Api.Object.QueryMeta_ -> SelectionSet decodesTo Api.Object.Species
filmsMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeFilmFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.FilmOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_filmsMeta" optionalArgs object_ identity


type alias PeopleMetaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.PersonFilter
    , orderBy : OptionalArgument Api.Enum.PersonOrderBy.PersonOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Meta information about the query.

  - filter -

-}
peopleMeta_ : (PeopleMetaOptionalArguments -> PeopleMetaOptionalArguments) -> SelectionSet decodesTo Api.Object.QueryMeta_ -> SelectionSet decodesTo Api.Object.Species
peopleMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodePersonFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.PersonOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_peopleMeta" optionalArgs object_ identity
