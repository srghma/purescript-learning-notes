-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.Planet exposing (..)

import Api.Enum.FilmOrderBy
import Api.Enum.PersonOrderBy
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| The climate of this planet.
-}
climate : SelectionSet (Maybe (List String)) Api.Object.Planet
climate =
    Object.selectionForField "(Maybe (List String))" "climate" [] (Decode.string |> Decode.list |> Decode.nullable)


createdAt : SelectionSet Api.ScalarCodecs.DateTime Api.Object.Planet
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The diameter of this planet in kilometers.
-}
diameter : SelectionSet (Maybe Int) Api.Object.Planet
diameter =
    Object.selectionForField "(Maybe Int)" "diameter" [] (Decode.int |> Decode.nullable)


type alias FilmsOptionalArguments =
    { filter : OptionalArgument Api.InputObject.FilmFilter
    , orderBy : OptionalArgument Api.Enum.FilmOrderBy.FilmOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
films : (FilmsOptionalArguments -> FilmsOptionalArguments) -> SelectionSet decodesTo Api.Object.Film -> SelectionSet (Maybe (List decodesTo)) Api.Object.Planet
films fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeFilmFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.FilmOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "films" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


{-| A number denoting the gravity of this planet, where "1" is normal or 1 standard G. "2" is twice or 2 standard Gs. "0.5" is half or 0.5 standard Gs.
-}
gravity : SelectionSet (Maybe String) Api.Object.Planet
gravity =
    Object.selectionForField "(Maybe String)" "gravity" [] (Decode.string |> Decode.nullable)


id : SelectionSet Api.ScalarCodecs.Id Api.Object.Planet
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| indicates if the record is published
-}
isPublished : SelectionSet Bool Api.Object.Planet
isPublished =
    Object.selectionForField "Bool" "isPublished" [] Decode.bool


{-| The name of the planet
-}
name : SelectionSet String Api.Object.Planet
name =
    Object.selectionForField "String" "name" [] Decode.string


{-| The number of standard days it takes for this planet to complete a single orbit of its local star.
-}
orbitalPeriod : SelectionSet (Maybe Int) Api.Object.Planet
orbitalPeriod =
    Object.selectionForField "(Maybe Int)" "orbitalPeriod" [] (Decode.int |> Decode.nullable)


{-| The average population of sentient beings inhabiting this planet.
-}
population : SelectionSet (Maybe Float) Api.Object.Planet
population =
    Object.selectionForField "(Maybe Float)" "population" [] (Decode.float |> Decode.nullable)


type alias ResidentsOptionalArguments =
    { filter : OptionalArgument Api.InputObject.PersonFilter
    , orderBy : OptionalArgument Api.Enum.PersonOrderBy.PersonOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
residents : (ResidentsOptionalArguments -> ResidentsOptionalArguments) -> SelectionSet decodesTo Api.Object.Person -> SelectionSet (Maybe (List decodesTo)) Api.Object.Planet
residents fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodePersonFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.PersonOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "residents" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


{-| The number of standard hours it takes for this planet to complete a single rotation on its axis.
-}
rotationPeriod : SelectionSet (Maybe Int) Api.Object.Planet
rotationPeriod =
    Object.selectionForField "(Maybe Int)" "rotationPeriod" [] (Decode.int |> Decode.nullable)


{-| The percentage of the planet surface that is naturally occurring water or bodies of water.
-}
surfaceWater : SelectionSet (Maybe Float) Api.Object.Planet
surfaceWater =
    Object.selectionForField "(Maybe Float)" "surfaceWater" [] (Decode.float |> Decode.nullable)


{-| The terrain of this planet.
-}
terrain : SelectionSet (Maybe (List String)) Api.Object.Planet
terrain =
    Object.selectionForField "(Maybe (List String))" "terrain" [] (Decode.string |> Decode.list |> Decode.nullable)


updatedAt : SelectionSet Api.ScalarCodecs.DateTime Api.Object.Planet
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


type alias FilmsMetaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.FilmFilter
    , orderBy : OptionalArgument Api.Enum.FilmOrderBy.FilmOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Meta information about the query.

  - filter -

-}
filmsMeta_ : (FilmsMetaOptionalArguments -> FilmsMetaOptionalArguments) -> SelectionSet decodesTo Api.Object.QueryMeta_ -> SelectionSet decodesTo Api.Object.Planet
filmsMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeFilmFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.FilmOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_filmsMeta" optionalArgs object_ identity


type alias ResidentsMetaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.PersonFilter
    , orderBy : OptionalArgument Api.Enum.PersonOrderBy.PersonOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Meta information about the query.

  - filter -

-}
residentsMeta_ : (ResidentsMetaOptionalArguments -> ResidentsMetaOptionalArguments) -> SelectionSet decodesTo Api.Object.QueryMeta_ -> SelectionSet decodesTo Api.Object.Planet
residentsMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodePersonFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.PersonOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_residentsMeta" optionalArgs object_ identity
