-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.Starship exposing (..)

import Api.Enum.FilmOrderBy
import Api.Enum.PersonOrderBy
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| The maximum number of kilograms that this starship can transport.
-}
cargoCapacity : SelectionSet (Maybe Float) Api.Object.Starship
cargoCapacity =
    Object.selectionForField "(Maybe Float)" "cargoCapacity" [] (Decode.float |> Decode.nullable)


{-| The class of this starship, such as "Starfighter" or "Deep Space Mobile Battlestation"
-}
class : SelectionSet (Maybe String) Api.Object.Starship
class =
    Object.selectionForField "(Maybe String)" "class" [] (Decode.string |> Decode.nullable)


{-| The maximum length of time that this starship can provide consumables for its entire crew without having to resupply.
-}
consumables : SelectionSet (Maybe String) Api.Object.Starship
consumables =
    Object.selectionForField "(Maybe String)" "consumables" [] (Decode.string |> Decode.nullable)


{-| The cost of this starship new, in galactic credits.
-}
costInCredits : SelectionSet (Maybe Float) Api.Object.Starship
costInCredits =
    Object.selectionForField "(Maybe Float)" "costInCredits" [] (Decode.float |> Decode.nullable)


createdAt : SelectionSet Api.ScalarCodecs.DateTime Api.Object.Starship
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The number of personnel needed to run or pilot this starship.
-}
crew : SelectionSet (Maybe Int) Api.Object.Starship
crew =
    Object.selectionForField "(Maybe Int)" "crew" [] (Decode.int |> Decode.nullable)


type alias FilmsOptionalArguments =
    { filter : OptionalArgument Api.InputObject.FilmFilter
    , orderBy : OptionalArgument Api.Enum.FilmOrderBy.FilmOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
films : (FilmsOptionalArguments -> FilmsOptionalArguments) -> SelectionSet decodesTo Api.Object.Film -> SelectionSet (Maybe (List decodesTo)) Api.Object.Starship
films fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeFilmFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.FilmOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "films" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


{-| The class of this starships hyperdrive.
-}
hyperdriveRating : SelectionSet (Maybe Float) Api.Object.Starship
hyperdriveRating =
    Object.selectionForField "(Maybe Float)" "hyperdriveRating" [] (Decode.float |> Decode.nullable)


id : SelectionSet Api.ScalarCodecs.Id Api.Object.Starship
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| indicates if the record is published
-}
isPublished : SelectionSet Bool Api.Object.Starship
isPublished =
    Object.selectionForField "Bool" "isPublished" [] Decode.bool


{-| The length of this starship in meters.
-}
length : SelectionSet (Maybe Float) Api.Object.Starship
length =
    Object.selectionForField "(Maybe Float)" "length" [] (Decode.float |> Decode.nullable)


{-| The manufacturer of this starship.
-}
manufacturer : SelectionSet (Maybe (List String)) Api.Object.Starship
manufacturer =
    Object.selectionForField "(Maybe (List String))" "manufacturer" [] (Decode.string |> Decode.list |> Decode.nullable)


{-| The maximum speed of this starship in the atmosphere. null if this starship is incapable of atmospheric flight.
-}
maxAtmospheringSpeed : SelectionSet (Maybe Int) Api.Object.Starship
maxAtmospheringSpeed =
    Object.selectionForField "(Maybe Int)" "maxAtmospheringSpeed" [] (Decode.int |> Decode.nullable)


{-| The Maximum number of Megalights this starship can travel in a standard hour. A "Megalight" is a standard unit of distance and has never been defined before within the Star Wars universe.
-}
mglt : SelectionSet (Maybe Int) Api.Object.Starship
mglt =
    Object.selectionForField "(Maybe Int)" "mglt" [] (Decode.int |> Decode.nullable)


{-| The name of this starship. The common name, such as "Death Star".
-}
name : SelectionSet String Api.Object.Starship
name =
    Object.selectionForField "String" "name" [] Decode.string


{-| The number of non-essential people this starship can transport.
-}
passengers : SelectionSet (Maybe Int) Api.Object.Starship
passengers =
    Object.selectionForField "(Maybe Int)" "passengers" [] (Decode.int |> Decode.nullable)


type alias PilotsOptionalArguments =
    { filter : OptionalArgument Api.InputObject.PersonFilter
    , orderBy : OptionalArgument Api.Enum.PersonOrderBy.PersonOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
pilots : (PilotsOptionalArguments -> PilotsOptionalArguments) -> SelectionSet decodesTo Api.Object.Person -> SelectionSet (Maybe (List decodesTo)) Api.Object.Starship
pilots fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodePersonFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.PersonOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "pilots" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


updatedAt : SelectionSet Api.ScalarCodecs.DateTime Api.Object.Starship
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


type alias FilmsMetaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.FilmFilter
    , orderBy : OptionalArgument Api.Enum.FilmOrderBy.FilmOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Meta information about the query.

  - filter -

-}
filmsMeta_ : (FilmsMetaOptionalArguments -> FilmsMetaOptionalArguments) -> SelectionSet decodesTo Api.Object.QueryMeta_ -> SelectionSet decodesTo Api.Object.Starship
filmsMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeFilmFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.FilmOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_filmsMeta" optionalArgs object_ identity


type alias PilotsMetaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.PersonFilter
    , orderBy : OptionalArgument Api.Enum.PersonOrderBy.PersonOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Meta information about the query.

  - filter -

-}
pilotsMeta_ : (PilotsMetaOptionalArguments -> PilotsMetaOptionalArguments) -> SelectionSet decodesTo Api.Object.QueryMeta_ -> SelectionSet decodesTo Api.Object.Starship
pilotsMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodePersonFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.PersonOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_pilotsMeta" optionalArgs object_ identity
