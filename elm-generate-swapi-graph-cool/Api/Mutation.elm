-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Mutation exposing (..)

import Api.Enum.PersonEyeColor
import Api.Enum.PersonGender
import Api.Enum.PersonHairColor
import Api.Enum.PersonSkinColor
import Api.Enum.SpeciesEyeColor
import Api.Enum.SpeciesHairColor
import Api.Enum.SpeciesSkinColor
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias CreateAssetOptionalArguments =
    { height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , width : OptionalArgument Float
    }


type alias CreateAssetRequiredArguments =
    { fileName : String
    , handle : String
    , size : Float
    , url : String
    }


{-|

  - fileName - Original File Name
  - handle - The File Handle
  - height - The height of the file in case it is an image
  - mimeType - The Mime Type
  - size - The Size Of The File
  - url - The Url Of The Asset
  - width - The width of the file in case it is an image

-}
createAsset : (CreateAssetOptionalArguments -> CreateAssetOptionalArguments) -> CreateAssetRequiredArguments -> SelectionSet decodesTo Api.Object.Asset -> SelectionSet (Maybe decodesTo) RootMutation
createAsset fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { height = Absent, mimeType = Absent, width = Absent }

        optionalArgs =
            [ Argument.optional "height" filledInOptionals.height Encode.float, Argument.optional "mimeType" filledInOptionals.mimeType Encode.string, Argument.optional "width" filledInOptionals.width Encode.float ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "createAsset" (optionalArgs ++ [ Argument.required "fileName" requiredArgs.fileName Encode.string, Argument.required "handle" requiredArgs.handle Encode.string, Argument.required "size" requiredArgs.size Encode.float, Argument.required "url" requiredArgs.url Encode.string ]) object_ (identity >> Decode.nullable)


type alias CreateFilmOptionalArguments =
    { director : OptionalArgument String
    , isPublished : OptionalArgument Bool
    , openingCrawl : OptionalArgument String
    , producers : OptionalArgument (List String)
    , releaseDate : OptionalArgument Api.ScalarCodecs.DateTime
    , charactersIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , characters : OptionalArgument (List Api.InputObject.FilmcharactersPerson)
    , planetsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , planets : OptionalArgument (List Api.InputObject.FilmplanetsPlanet)
    , speciesIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , species : OptionalArgument (List Api.InputObject.FilmspeciesSpecies)
    , starshipsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , starships : OptionalArgument (List Api.InputObject.FilmstarshipsStarship)
    , vehiclesIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , vehicles : OptionalArgument (List Api.InputObject.FilmvehiclesVehicle)
    }


type alias CreateFilmRequiredArguments =
    { episodeId : Int
    , title : String
    }


{-|

  - director - The name of the director of this film.
  - episodeId - The episode number of this film.
  - isPublished - indicates if the record is published
  - openingCrawl - The opening paragraphs at the beginning of this film.
  - producers - The names of the producers of this film.
  - releaseDate - The ISO 8601 date format of film release at original creator country.
  - title - The title of this film

-}
createFilm : (CreateFilmOptionalArguments -> CreateFilmOptionalArguments) -> CreateFilmRequiredArguments -> SelectionSet decodesTo Api.Object.Film -> SelectionSet (Maybe decodesTo) RootMutation
createFilm fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { director = Absent, isPublished = Absent, openingCrawl = Absent, producers = Absent, releaseDate = Absent, charactersIds = Absent, characters = Absent, planetsIds = Absent, planets = Absent, speciesIds = Absent, species = Absent, starshipsIds = Absent, starships = Absent, vehiclesIds = Absent, vehicles = Absent }

        optionalArgs =
            [ Argument.optional "director" filledInOptionals.director Encode.string, Argument.optional "isPublished" filledInOptionals.isPublished Encode.bool, Argument.optional "openingCrawl" filledInOptionals.openingCrawl Encode.string, Argument.optional "producers" filledInOptionals.producers (Encode.string |> Encode.list), Argument.optional "releaseDate" filledInOptionals.releaseDate (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDateTime), Argument.optional "charactersIds" filledInOptionals.charactersIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "characters" filledInOptionals.characters (Api.InputObject.encodeFilmcharactersPerson |> Encode.list), Argument.optional "planetsIds" filledInOptionals.planetsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "planets" filledInOptionals.planets (Api.InputObject.encodeFilmplanetsPlanet |> Encode.list), Argument.optional "speciesIds" filledInOptionals.speciesIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "species" filledInOptionals.species (Api.InputObject.encodeFilmspeciesSpecies |> Encode.list), Argument.optional "starshipsIds" filledInOptionals.starshipsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "starships" filledInOptionals.starships (Api.InputObject.encodeFilmstarshipsStarship |> Encode.list), Argument.optional "vehiclesIds" filledInOptionals.vehiclesIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "vehicles" filledInOptionals.vehicles (Api.InputObject.encodeFilmvehiclesVehicle |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "createFilm" (optionalArgs ++ [ Argument.required "episodeId" requiredArgs.episodeId Encode.int, Argument.required "title" requiredArgs.title Encode.string ]) object_ (identity >> Decode.nullable)


type alias CreatePersonOptionalArguments =
    { birthYear : OptionalArgument String
    , eyeColor : OptionalArgument (List Api.Enum.PersonEyeColor.PersonEyeColor)
    , gender : OptionalArgument Api.Enum.PersonGender.PersonGender
    , hairColor : OptionalArgument (List Api.Enum.PersonHairColor.PersonHairColor)
    , height : OptionalArgument Int
    , isPublished : OptionalArgument Bool
    , mass : OptionalArgument Float
    , skinColor : OptionalArgument (List Api.Enum.PersonSkinColor.PersonSkinColor)
    , homeworldId : OptionalArgument Api.ScalarCodecs.Id
    , homeworld : OptionalArgument Api.InputObject.PersonhomeworldPlanet
    , filmsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , films : OptionalArgument (List Api.InputObject.PersonfilmsFilm)
    , speciesIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , species : OptionalArgument (List Api.InputObject.PersonspeciesSpecies)
    , starshipsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , starships : OptionalArgument (List Api.InputObject.PersonstarshipsStarship)
    , vehiclesIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , vehicles : OptionalArgument (List Api.InputObject.PersonvehiclesVehicle)
    }


type alias CreatePersonRequiredArguments =
    { name : String }


{-|

  - birthYear - The birth year of the person, using the in-universe standard of BBY or ABY - Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is a battle that occurs at the end of Star Wars episode IV: A New Hope.
  - eyeColor - The eye color of this person. Will be "UNKNOWN" if not known or null if the person does not have an eye.
  - gender - The gender of this person. Will be "UNKNOWN" if not known or null if the person does not have a gender.
  - hairColor - The hair color of this person. Will be "UNKNOWN" if not known or null if the person does not have hair.
  - height - The height of the person in centimeters.
  - isPublished - indicates if the record is published
  - mass - The mass of the person in kilograms.
  - name - The name of this person.
  - skinColor - The skin color of this person.

-}
createPerson : (CreatePersonOptionalArguments -> CreatePersonOptionalArguments) -> CreatePersonRequiredArguments -> SelectionSet decodesTo Api.Object.Person -> SelectionSet (Maybe decodesTo) RootMutation
createPerson fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { birthYear = Absent, eyeColor = Absent, gender = Absent, hairColor = Absent, height = Absent, isPublished = Absent, mass = Absent, skinColor = Absent, homeworldId = Absent, homeworld = Absent, filmsIds = Absent, films = Absent, speciesIds = Absent, species = Absent, starshipsIds = Absent, starships = Absent, vehiclesIds = Absent, vehicles = Absent }

        optionalArgs =
            [ Argument.optional "birthYear" filledInOptionals.birthYear Encode.string, Argument.optional "eyeColor" filledInOptionals.eyeColor (Encode.enum Api.Enum.PersonEyeColor.toString |> Encode.list), Argument.optional "gender" filledInOptionals.gender (Encode.enum Api.Enum.PersonGender.toString), Argument.optional "hairColor" filledInOptionals.hairColor (Encode.enum Api.Enum.PersonHairColor.toString |> Encode.list), Argument.optional "height" filledInOptionals.height Encode.int, Argument.optional "isPublished" filledInOptionals.isPublished Encode.bool, Argument.optional "mass" filledInOptionals.mass Encode.float, Argument.optional "skinColor" filledInOptionals.skinColor (Encode.enum Api.Enum.PersonSkinColor.toString |> Encode.list), Argument.optional "homeworldId" filledInOptionals.homeworldId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.optional "homeworld" filledInOptionals.homeworld Api.InputObject.encodePersonhomeworldPlanet, Argument.optional "filmsIds" filledInOptionals.filmsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "films" filledInOptionals.films (Api.InputObject.encodePersonfilmsFilm |> Encode.list), Argument.optional "speciesIds" filledInOptionals.speciesIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "species" filledInOptionals.species (Api.InputObject.encodePersonspeciesSpecies |> Encode.list), Argument.optional "starshipsIds" filledInOptionals.starshipsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "starships" filledInOptionals.starships (Api.InputObject.encodePersonstarshipsStarship |> Encode.list), Argument.optional "vehiclesIds" filledInOptionals.vehiclesIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "vehicles" filledInOptionals.vehicles (Api.InputObject.encodePersonvehiclesVehicle |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "createPerson" (optionalArgs ++ [ Argument.required "name" requiredArgs.name Encode.string ]) object_ (identity >> Decode.nullable)


type alias CreatePlanetOptionalArguments =
    { climate : OptionalArgument (List String)
    , diameter : OptionalArgument Int
    , gravity : OptionalArgument String
    , isPublished : OptionalArgument Bool
    , orbitalPeriod : OptionalArgument Int
    , population : OptionalArgument Float
    , rotationPeriod : OptionalArgument Int
    , surfaceWater : OptionalArgument Float
    , terrain : OptionalArgument (List String)
    , filmsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , films : OptionalArgument (List Api.InputObject.PlanetfilmsFilm)
    , residentsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , residents : OptionalArgument (List Api.InputObject.PlanetresidentsPerson)
    }


type alias CreatePlanetRequiredArguments =
    { name : String }


{-|

  - climate - The climate of this planet.
  - diameter - The diameter of this planet in kilometers.
  - gravity - A number denoting the gravity of this planet, where "1" is normal or 1 standard G. "2" is twice or 2 standard Gs. "0.5" is half or 0.5 standard Gs.
  - isPublished - indicates if the record is published
  - name - The name of the planet
  - orbitalPeriod - The number of standard days it takes for this planet to complete a single orbit of its local star.
  - population - The average population of sentient beings inhabiting this planet.
  - rotationPeriod - The number of standard hours it takes for this planet to complete a single rotation on its axis.
  - surfaceWater - The percentage of the planet surface that is naturally occurring water or bodies of water.
  - terrain - The terrain of this planet.

-}
createPlanet : (CreatePlanetOptionalArguments -> CreatePlanetOptionalArguments) -> CreatePlanetRequiredArguments -> SelectionSet decodesTo Api.Object.Planet -> SelectionSet (Maybe decodesTo) RootMutation
createPlanet fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { climate = Absent, diameter = Absent, gravity = Absent, isPublished = Absent, orbitalPeriod = Absent, population = Absent, rotationPeriod = Absent, surfaceWater = Absent, terrain = Absent, filmsIds = Absent, films = Absent, residentsIds = Absent, residents = Absent }

        optionalArgs =
            [ Argument.optional "climate" filledInOptionals.climate (Encode.string |> Encode.list), Argument.optional "diameter" filledInOptionals.diameter Encode.int, Argument.optional "gravity" filledInOptionals.gravity Encode.string, Argument.optional "isPublished" filledInOptionals.isPublished Encode.bool, Argument.optional "orbitalPeriod" filledInOptionals.orbitalPeriod Encode.int, Argument.optional "population" filledInOptionals.population Encode.float, Argument.optional "rotationPeriod" filledInOptionals.rotationPeriod Encode.int, Argument.optional "surfaceWater" filledInOptionals.surfaceWater Encode.float, Argument.optional "terrain" filledInOptionals.terrain (Encode.string |> Encode.list), Argument.optional "filmsIds" filledInOptionals.filmsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "films" filledInOptionals.films (Api.InputObject.encodePlanetfilmsFilm |> Encode.list), Argument.optional "residentsIds" filledInOptionals.residentsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "residents" filledInOptionals.residents (Api.InputObject.encodePlanetresidentsPerson |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "createPlanet" (optionalArgs ++ [ Argument.required "name" requiredArgs.name Encode.string ]) object_ (identity >> Decode.nullable)


type alias CreateSpeciesOptionalArguments =
    { averageHeight : OptionalArgument Int
    , averageLifespan : OptionalArgument Int
    , classification : OptionalArgument String
    , designation : OptionalArgument String
    , eyeColor : OptionalArgument (List Api.Enum.SpeciesEyeColor.SpeciesEyeColor)
    , hairColor : OptionalArgument (List Api.Enum.SpeciesHairColor.SpeciesHairColor)
    , isPublished : OptionalArgument Bool
    , language : OptionalArgument String
    , skinColor : OptionalArgument (List Api.Enum.SpeciesSkinColor.SpeciesSkinColor)
    , filmsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , films : OptionalArgument (List Api.InputObject.SpeciesfilmsFilm)
    , peopleIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , people : OptionalArgument (List Api.InputObject.SpeciespeoplePerson)
    }


type alias CreateSpeciesRequiredArguments =
    { name : String }


{-|

  - averageHeight - The average height of this species in centimeters.
  - averageLifespan - The average lifespan of this species in years.
  - classification - The classification of this species, such as "mammal" or "reptile".
  - designation - The designation of this species, such as "sentient".
  - eyeColor - The eye colors for this species, "UNKNOWN" if not known, null if this species does not typically have eyes.
  - hairColor - The hair colors for this species, "UNKNOWN" if not known, null if this species does not typically have hairs.
  - isPublished - indicates if the record is published
  - language - The language commonly spoken by this species.
  - name - The name of this species.
  - skinColor - The skin colors for this species, "UNKNOWN" if not known, null if this species does not typically have a skin.

-}
createSpecies : (CreateSpeciesOptionalArguments -> CreateSpeciesOptionalArguments) -> CreateSpeciesRequiredArguments -> SelectionSet decodesTo Api.Object.Species -> SelectionSet (Maybe decodesTo) RootMutation
createSpecies fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { averageHeight = Absent, averageLifespan = Absent, classification = Absent, designation = Absent, eyeColor = Absent, hairColor = Absent, isPublished = Absent, language = Absent, skinColor = Absent, filmsIds = Absent, films = Absent, peopleIds = Absent, people = Absent }

        optionalArgs =
            [ Argument.optional "averageHeight" filledInOptionals.averageHeight Encode.int, Argument.optional "averageLifespan" filledInOptionals.averageLifespan Encode.int, Argument.optional "classification" filledInOptionals.classification Encode.string, Argument.optional "designation" filledInOptionals.designation Encode.string, Argument.optional "eyeColor" filledInOptionals.eyeColor (Encode.enum Api.Enum.SpeciesEyeColor.toString |> Encode.list), Argument.optional "hairColor" filledInOptionals.hairColor (Encode.enum Api.Enum.SpeciesHairColor.toString |> Encode.list), Argument.optional "isPublished" filledInOptionals.isPublished Encode.bool, Argument.optional "language" filledInOptionals.language Encode.string, Argument.optional "skinColor" filledInOptionals.skinColor (Encode.enum Api.Enum.SpeciesSkinColor.toString |> Encode.list), Argument.optional "filmsIds" filledInOptionals.filmsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "films" filledInOptionals.films (Api.InputObject.encodeSpeciesfilmsFilm |> Encode.list), Argument.optional "peopleIds" filledInOptionals.peopleIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "people" filledInOptionals.people (Api.InputObject.encodeSpeciespeoplePerson |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "createSpecies" (optionalArgs ++ [ Argument.required "name" requiredArgs.name Encode.string ]) object_ (identity >> Decode.nullable)


type alias CreateStarshipOptionalArguments =
    { cargoCapacity : OptionalArgument Float
    , class : OptionalArgument String
    , consumables : OptionalArgument String
    , costInCredits : OptionalArgument Float
    , crew : OptionalArgument Int
    , hyperdriveRating : OptionalArgument Float
    , isPublished : OptionalArgument Bool
    , length : OptionalArgument Float
    , manufacturer : OptionalArgument (List String)
    , maxAtmospheringSpeed : OptionalArgument Int
    , mglt : OptionalArgument Int
    , passengers : OptionalArgument Int
    , filmsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , films : OptionalArgument (List Api.InputObject.StarshipfilmsFilm)
    , pilotsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , pilots : OptionalArgument (List Api.InputObject.StarshippilotsPerson)
    }


type alias CreateStarshipRequiredArguments =
    { name : String }


{-|

  - cargoCapacity - The maximum number of kilograms that this starship can transport.
  - class - The class of this starship, such as "Starfighter" or "Deep Space Mobile Battlestation"
  - consumables - The maximum length of time that this starship can provide consumables for its entire crew without having to resupply.
  - costInCredits - The cost of this starship new, in galactic credits.
  - crew - The number of personnel needed to run or pilot this starship.
  - hyperdriveRating - The class of this starships hyperdrive.
  - isPublished - indicates if the record is published
  - length - The length of this starship in meters.
  - manufacturer - The manufacturer of this starship.
  - maxAtmospheringSpeed - The maximum speed of this starship in the atmosphere. null if this starship is incapable of atmospheric flight.
  - mglt - The Maximum number of Megalights this starship can travel in a standard hour. A "Megalight" is a standard unit of distance and has never been defined before within the Star Wars universe.
  - name - The name of this starship. The common name, such as "Death Star".
  - passengers - The number of non-essential people this starship can transport.

-}
createStarship : (CreateStarshipOptionalArguments -> CreateStarshipOptionalArguments) -> CreateStarshipRequiredArguments -> SelectionSet decodesTo Api.Object.Starship -> SelectionSet (Maybe decodesTo) RootMutation
createStarship fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { cargoCapacity = Absent, class = Absent, consumables = Absent, costInCredits = Absent, crew = Absent, hyperdriveRating = Absent, isPublished = Absent, length = Absent, manufacturer = Absent, maxAtmospheringSpeed = Absent, mglt = Absent, passengers = Absent, filmsIds = Absent, films = Absent, pilotsIds = Absent, pilots = Absent }

        optionalArgs =
            [ Argument.optional "cargoCapacity" filledInOptionals.cargoCapacity Encode.float, Argument.optional "class" filledInOptionals.class Encode.string, Argument.optional "consumables" filledInOptionals.consumables Encode.string, Argument.optional "costInCredits" filledInOptionals.costInCredits Encode.float, Argument.optional "crew" filledInOptionals.crew Encode.int, Argument.optional "hyperdriveRating" filledInOptionals.hyperdriveRating Encode.float, Argument.optional "isPublished" filledInOptionals.isPublished Encode.bool, Argument.optional "length" filledInOptionals.length Encode.float, Argument.optional "manufacturer" filledInOptionals.manufacturer (Encode.string |> Encode.list), Argument.optional "maxAtmospheringSpeed" filledInOptionals.maxAtmospheringSpeed Encode.int, Argument.optional "mglt" filledInOptionals.mglt Encode.int, Argument.optional "passengers" filledInOptionals.passengers Encode.int, Argument.optional "filmsIds" filledInOptionals.filmsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "films" filledInOptionals.films (Api.InputObject.encodeStarshipfilmsFilm |> Encode.list), Argument.optional "pilotsIds" filledInOptionals.pilotsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "pilots" filledInOptionals.pilots (Api.InputObject.encodeStarshippilotsPerson |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "createStarship" (optionalArgs ++ [ Argument.required "name" requiredArgs.name Encode.string ]) object_ (identity >> Decode.nullable)


type alias CreateVehicleOptionalArguments =
    { cargoCapacity : OptionalArgument Int
    , class : OptionalArgument String
    , consumables : OptionalArgument String
    , costInCredits : OptionalArgument Int
    , crew : OptionalArgument Int
    , isPublished : OptionalArgument Bool
    , length : OptionalArgument Float
    , manufacturer : OptionalArgument (List String)
    , maxAtmospheringSpeed : OptionalArgument Int
    , model : OptionalArgument String
    , passengers : OptionalArgument Int
    , filmsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , films : OptionalArgument (List Api.InputObject.VehiclefilmsFilm)
    , pilotsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , pilots : OptionalArgument (List Api.InputObject.VehiclepilotsPerson)
    }


type alias CreateVehicleRequiredArguments =
    { name : String }


{-|

  - cargoCapacity - The maximum number of kilograms that this vehicle can transport.
  - class - The class of this vehicle, such as "Wheeled" or "Repulsorcraft".
  - consumables - The maximum length of time that this vehicle can provide consumables for its entire crew without having to resupply.
  - costInCredits - The cost of this vehicle new, in Galactic Credits.
  - crew - The number of personnel needed to run or pilot this vehicle.
  - isPublished - indicates if the record is published
  - length - The length of this vehicle in meters.
  - manufacturer - The manufacturer of this vehicle.
  - maxAtmospheringSpeed - The maximum speed of this vehicle in the atmosphere.
  - model - The model or official name of this vehicle. Such as "All-Terrain Attack Transport".
  - name - The name of this vehicle. The common name, such as "Sand Crawler" or "Speeder bike".
  - passengers - The number of non-essential people this vehicle can transport.

-}
createVehicle : (CreateVehicleOptionalArguments -> CreateVehicleOptionalArguments) -> CreateVehicleRequiredArguments -> SelectionSet decodesTo Api.Object.Vehicle -> SelectionSet (Maybe decodesTo) RootMutation
createVehicle fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { cargoCapacity = Absent, class = Absent, consumables = Absent, costInCredits = Absent, crew = Absent, isPublished = Absent, length = Absent, manufacturer = Absent, maxAtmospheringSpeed = Absent, model = Absent, passengers = Absent, filmsIds = Absent, films = Absent, pilotsIds = Absent, pilots = Absent }

        optionalArgs =
            [ Argument.optional "cargoCapacity" filledInOptionals.cargoCapacity Encode.int, Argument.optional "class" filledInOptionals.class Encode.string, Argument.optional "consumables" filledInOptionals.consumables Encode.string, Argument.optional "costInCredits" filledInOptionals.costInCredits Encode.int, Argument.optional "crew" filledInOptionals.crew Encode.int, Argument.optional "isPublished" filledInOptionals.isPublished Encode.bool, Argument.optional "length" filledInOptionals.length Encode.float, Argument.optional "manufacturer" filledInOptionals.manufacturer (Encode.string |> Encode.list), Argument.optional "maxAtmospheringSpeed" filledInOptionals.maxAtmospheringSpeed Encode.int, Argument.optional "model" filledInOptionals.model Encode.string, Argument.optional "passengers" filledInOptionals.passengers Encode.int, Argument.optional "filmsIds" filledInOptionals.filmsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "films" filledInOptionals.films (Api.InputObject.encodeVehiclefilmsFilm |> Encode.list), Argument.optional "pilotsIds" filledInOptionals.pilotsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "pilots" filledInOptionals.pilots (Api.InputObject.encodeVehiclepilotsPerson |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "createVehicle" (optionalArgs ++ [ Argument.required "name" requiredArgs.name Encode.string ]) object_ (identity >> Decode.nullable)


type alias UpdateAssetOptionalArguments =
    { fileName : OptionalArgument String
    , handle : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , url : OptionalArgument String
    , width : OptionalArgument Float
    }


type alias UpdateAssetRequiredArguments =
    { id : Api.ScalarCodecs.Id }


{-|

  - fileName - Original File Name
  - handle - The File Handle
  - height - The height of the file in case it is an image
  - mimeType - The Mime Type
  - size - The Size Of The File
  - url - The Url Of The Asset
  - width - The width of the file in case it is an image

-}
updateAsset : (UpdateAssetOptionalArguments -> UpdateAssetOptionalArguments) -> UpdateAssetRequiredArguments -> SelectionSet decodesTo Api.Object.Asset -> SelectionSet (Maybe decodesTo) RootMutation
updateAsset fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { fileName = Absent, handle = Absent, height = Absent, mimeType = Absent, size = Absent, url = Absent, width = Absent }

        optionalArgs =
            [ Argument.optional "fileName" filledInOptionals.fileName Encode.string, Argument.optional "handle" filledInOptionals.handle Encode.string, Argument.optional "height" filledInOptionals.height Encode.float, Argument.optional "mimeType" filledInOptionals.mimeType Encode.string, Argument.optional "size" filledInOptionals.size Encode.float, Argument.optional "url" filledInOptionals.url Encode.string, Argument.optional "width" filledInOptionals.width Encode.float ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateAsset" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]) object_ (identity >> Decode.nullable)


type alias UpdateFilmOptionalArguments =
    { director : OptionalArgument String
    , episodeId : OptionalArgument Int
    , isPublished : OptionalArgument Bool
    , openingCrawl : OptionalArgument String
    , producers : OptionalArgument (List String)
    , releaseDate : OptionalArgument Api.ScalarCodecs.DateTime
    , title : OptionalArgument String
    , charactersIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , characters : OptionalArgument (List Api.InputObject.FilmcharactersPerson)
    , planetsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , planets : OptionalArgument (List Api.InputObject.FilmplanetsPlanet)
    , speciesIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , species : OptionalArgument (List Api.InputObject.FilmspeciesSpecies)
    , starshipsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , starships : OptionalArgument (List Api.InputObject.FilmstarshipsStarship)
    , vehiclesIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , vehicles : OptionalArgument (List Api.InputObject.FilmvehiclesVehicle)
    }


type alias UpdateFilmRequiredArguments =
    { id : Api.ScalarCodecs.Id }


{-|

  - director - The name of the director of this film.
  - episodeId - The episode number of this film.
  - isPublished - indicates if the record is published
  - openingCrawl - The opening paragraphs at the beginning of this film.
  - producers - The names of the producers of this film.
  - releaseDate - The ISO 8601 date format of film release at original creator country.
  - title - The title of this film

-}
updateFilm : (UpdateFilmOptionalArguments -> UpdateFilmOptionalArguments) -> UpdateFilmRequiredArguments -> SelectionSet decodesTo Api.Object.Film -> SelectionSet (Maybe decodesTo) RootMutation
updateFilm fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { director = Absent, episodeId = Absent, isPublished = Absent, openingCrawl = Absent, producers = Absent, releaseDate = Absent, title = Absent, charactersIds = Absent, characters = Absent, planetsIds = Absent, planets = Absent, speciesIds = Absent, species = Absent, starshipsIds = Absent, starships = Absent, vehiclesIds = Absent, vehicles = Absent }

        optionalArgs =
            [ Argument.optional "director" filledInOptionals.director Encode.string, Argument.optional "episodeId" filledInOptionals.episodeId Encode.int, Argument.optional "isPublished" filledInOptionals.isPublished Encode.bool, Argument.optional "openingCrawl" filledInOptionals.openingCrawl Encode.string, Argument.optional "producers" filledInOptionals.producers (Encode.string |> Encode.list), Argument.optional "releaseDate" filledInOptionals.releaseDate (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDateTime), Argument.optional "title" filledInOptionals.title Encode.string, Argument.optional "charactersIds" filledInOptionals.charactersIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "characters" filledInOptionals.characters (Api.InputObject.encodeFilmcharactersPerson |> Encode.list), Argument.optional "planetsIds" filledInOptionals.planetsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "planets" filledInOptionals.planets (Api.InputObject.encodeFilmplanetsPlanet |> Encode.list), Argument.optional "speciesIds" filledInOptionals.speciesIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "species" filledInOptionals.species (Api.InputObject.encodeFilmspeciesSpecies |> Encode.list), Argument.optional "starshipsIds" filledInOptionals.starshipsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "starships" filledInOptionals.starships (Api.InputObject.encodeFilmstarshipsStarship |> Encode.list), Argument.optional "vehiclesIds" filledInOptionals.vehiclesIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "vehicles" filledInOptionals.vehicles (Api.InputObject.encodeFilmvehiclesVehicle |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateFilm" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]) object_ (identity >> Decode.nullable)


type alias UpdatePersonOptionalArguments =
    { birthYear : OptionalArgument String
    , eyeColor : OptionalArgument (List Api.Enum.PersonEyeColor.PersonEyeColor)
    , gender : OptionalArgument Api.Enum.PersonGender.PersonGender
    , hairColor : OptionalArgument (List Api.Enum.PersonHairColor.PersonHairColor)
    , height : OptionalArgument Int
    , isPublished : OptionalArgument Bool
    , mass : OptionalArgument Float
    , name : OptionalArgument String
    , skinColor : OptionalArgument (List Api.Enum.PersonSkinColor.PersonSkinColor)
    , homeworldId : OptionalArgument Api.ScalarCodecs.Id
    , homeworld : OptionalArgument Api.InputObject.PersonhomeworldPlanet
    , filmsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , films : OptionalArgument (List Api.InputObject.PersonfilmsFilm)
    , speciesIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , species : OptionalArgument (List Api.InputObject.PersonspeciesSpecies)
    , starshipsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , starships : OptionalArgument (List Api.InputObject.PersonstarshipsStarship)
    , vehiclesIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , vehicles : OptionalArgument (List Api.InputObject.PersonvehiclesVehicle)
    }


type alias UpdatePersonRequiredArguments =
    { id : Api.ScalarCodecs.Id }


{-|

  - birthYear - The birth year of the person, using the in-universe standard of BBY or ABY - Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is a battle that occurs at the end of Star Wars episode IV: A New Hope.
  - eyeColor - The eye color of this person. Will be "UNKNOWN" if not known or null if the person does not have an eye.
  - gender - The gender of this person. Will be "UNKNOWN" if not known or null if the person does not have a gender.
  - hairColor - The hair color of this person. Will be "UNKNOWN" if not known or null if the person does not have hair.
  - height - The height of the person in centimeters.
  - isPublished - indicates if the record is published
  - mass - The mass of the person in kilograms.
  - name - The name of this person.
  - skinColor - The skin color of this person.

-}
updatePerson : (UpdatePersonOptionalArguments -> UpdatePersonOptionalArguments) -> UpdatePersonRequiredArguments -> SelectionSet decodesTo Api.Object.Person -> SelectionSet (Maybe decodesTo) RootMutation
updatePerson fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { birthYear = Absent, eyeColor = Absent, gender = Absent, hairColor = Absent, height = Absent, isPublished = Absent, mass = Absent, name = Absent, skinColor = Absent, homeworldId = Absent, homeworld = Absent, filmsIds = Absent, films = Absent, speciesIds = Absent, species = Absent, starshipsIds = Absent, starships = Absent, vehiclesIds = Absent, vehicles = Absent }

        optionalArgs =
            [ Argument.optional "birthYear" filledInOptionals.birthYear Encode.string, Argument.optional "eyeColor" filledInOptionals.eyeColor (Encode.enum Api.Enum.PersonEyeColor.toString |> Encode.list), Argument.optional "gender" filledInOptionals.gender (Encode.enum Api.Enum.PersonGender.toString), Argument.optional "hairColor" filledInOptionals.hairColor (Encode.enum Api.Enum.PersonHairColor.toString |> Encode.list), Argument.optional "height" filledInOptionals.height Encode.int, Argument.optional "isPublished" filledInOptionals.isPublished Encode.bool, Argument.optional "mass" filledInOptionals.mass Encode.float, Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "skinColor" filledInOptionals.skinColor (Encode.enum Api.Enum.PersonSkinColor.toString |> Encode.list), Argument.optional "homeworldId" filledInOptionals.homeworldId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.optional "homeworld" filledInOptionals.homeworld Api.InputObject.encodePersonhomeworldPlanet, Argument.optional "filmsIds" filledInOptionals.filmsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "films" filledInOptionals.films (Api.InputObject.encodePersonfilmsFilm |> Encode.list), Argument.optional "speciesIds" filledInOptionals.speciesIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "species" filledInOptionals.species (Api.InputObject.encodePersonspeciesSpecies |> Encode.list), Argument.optional "starshipsIds" filledInOptionals.starshipsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "starships" filledInOptionals.starships (Api.InputObject.encodePersonstarshipsStarship |> Encode.list), Argument.optional "vehiclesIds" filledInOptionals.vehiclesIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "vehicles" filledInOptionals.vehicles (Api.InputObject.encodePersonvehiclesVehicle |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updatePerson" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]) object_ (identity >> Decode.nullable)


type alias UpdatePlanetOptionalArguments =
    { climate : OptionalArgument (List String)
    , diameter : OptionalArgument Int
    , gravity : OptionalArgument String
    , isPublished : OptionalArgument Bool
    , name : OptionalArgument String
    , orbitalPeriod : OptionalArgument Int
    , population : OptionalArgument Float
    , rotationPeriod : OptionalArgument Int
    , surfaceWater : OptionalArgument Float
    , terrain : OptionalArgument (List String)
    , filmsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , films : OptionalArgument (List Api.InputObject.PlanetfilmsFilm)
    , residentsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , residents : OptionalArgument (List Api.InputObject.PlanetresidentsPerson)
    }


type alias UpdatePlanetRequiredArguments =
    { id : Api.ScalarCodecs.Id }


{-|

  - climate - The climate of this planet.
  - diameter - The diameter of this planet in kilometers.
  - gravity - A number denoting the gravity of this planet, where "1" is normal or 1 standard G. "2" is twice or 2 standard Gs. "0.5" is half or 0.5 standard Gs.
  - isPublished - indicates if the record is published
  - name - The name of the planet
  - orbitalPeriod - The number of standard days it takes for this planet to complete a single orbit of its local star.
  - population - The average population of sentient beings inhabiting this planet.
  - rotationPeriod - The number of standard hours it takes for this planet to complete a single rotation on its axis.
  - surfaceWater - The percentage of the planet surface that is naturally occurring water or bodies of water.
  - terrain - The terrain of this planet.

-}
updatePlanet : (UpdatePlanetOptionalArguments -> UpdatePlanetOptionalArguments) -> UpdatePlanetRequiredArguments -> SelectionSet decodesTo Api.Object.Planet -> SelectionSet (Maybe decodesTo) RootMutation
updatePlanet fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { climate = Absent, diameter = Absent, gravity = Absent, isPublished = Absent, name = Absent, orbitalPeriod = Absent, population = Absent, rotationPeriod = Absent, surfaceWater = Absent, terrain = Absent, filmsIds = Absent, films = Absent, residentsIds = Absent, residents = Absent }

        optionalArgs =
            [ Argument.optional "climate" filledInOptionals.climate (Encode.string |> Encode.list), Argument.optional "diameter" filledInOptionals.diameter Encode.int, Argument.optional "gravity" filledInOptionals.gravity Encode.string, Argument.optional "isPublished" filledInOptionals.isPublished Encode.bool, Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "orbitalPeriod" filledInOptionals.orbitalPeriod Encode.int, Argument.optional "population" filledInOptionals.population Encode.float, Argument.optional "rotationPeriod" filledInOptionals.rotationPeriod Encode.int, Argument.optional "surfaceWater" filledInOptionals.surfaceWater Encode.float, Argument.optional "terrain" filledInOptionals.terrain (Encode.string |> Encode.list), Argument.optional "filmsIds" filledInOptionals.filmsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "films" filledInOptionals.films (Api.InputObject.encodePlanetfilmsFilm |> Encode.list), Argument.optional "residentsIds" filledInOptionals.residentsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "residents" filledInOptionals.residents (Api.InputObject.encodePlanetresidentsPerson |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updatePlanet" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]) object_ (identity >> Decode.nullable)


type alias UpdateSpeciesOptionalArguments =
    { averageHeight : OptionalArgument Int
    , averageLifespan : OptionalArgument Int
    , classification : OptionalArgument String
    , designation : OptionalArgument String
    , eyeColor : OptionalArgument (List Api.Enum.SpeciesEyeColor.SpeciesEyeColor)
    , hairColor : OptionalArgument (List Api.Enum.SpeciesHairColor.SpeciesHairColor)
    , isPublished : OptionalArgument Bool
    , language : OptionalArgument String
    , name : OptionalArgument String
    , skinColor : OptionalArgument (List Api.Enum.SpeciesSkinColor.SpeciesSkinColor)
    , filmsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , films : OptionalArgument (List Api.InputObject.SpeciesfilmsFilm)
    , peopleIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , people : OptionalArgument (List Api.InputObject.SpeciespeoplePerson)
    }


type alias UpdateSpeciesRequiredArguments =
    { id : Api.ScalarCodecs.Id }


{-|

  - averageHeight - The average height of this species in centimeters.
  - averageLifespan - The average lifespan of this species in years.
  - classification - The classification of this species, such as "mammal" or "reptile".
  - designation - The designation of this species, such as "sentient".
  - eyeColor - The eye colors for this species, "UNKNOWN" if not known, null if this species does not typically have eyes.
  - hairColor - The hair colors for this species, "UNKNOWN" if not known, null if this species does not typically have hairs.
  - isPublished - indicates if the record is published
  - language - The language commonly spoken by this species.
  - name - The name of this species.
  - skinColor - The skin colors for this species, "UNKNOWN" if not known, null if this species does not typically have a skin.

-}
updateSpecies : (UpdateSpeciesOptionalArguments -> UpdateSpeciesOptionalArguments) -> UpdateSpeciesRequiredArguments -> SelectionSet decodesTo Api.Object.Species -> SelectionSet (Maybe decodesTo) RootMutation
updateSpecies fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { averageHeight = Absent, averageLifespan = Absent, classification = Absent, designation = Absent, eyeColor = Absent, hairColor = Absent, isPublished = Absent, language = Absent, name = Absent, skinColor = Absent, filmsIds = Absent, films = Absent, peopleIds = Absent, people = Absent }

        optionalArgs =
            [ Argument.optional "averageHeight" filledInOptionals.averageHeight Encode.int, Argument.optional "averageLifespan" filledInOptionals.averageLifespan Encode.int, Argument.optional "classification" filledInOptionals.classification Encode.string, Argument.optional "designation" filledInOptionals.designation Encode.string, Argument.optional "eyeColor" filledInOptionals.eyeColor (Encode.enum Api.Enum.SpeciesEyeColor.toString |> Encode.list), Argument.optional "hairColor" filledInOptionals.hairColor (Encode.enum Api.Enum.SpeciesHairColor.toString |> Encode.list), Argument.optional "isPublished" filledInOptionals.isPublished Encode.bool, Argument.optional "language" filledInOptionals.language Encode.string, Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "skinColor" filledInOptionals.skinColor (Encode.enum Api.Enum.SpeciesSkinColor.toString |> Encode.list), Argument.optional "filmsIds" filledInOptionals.filmsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "films" filledInOptionals.films (Api.InputObject.encodeSpeciesfilmsFilm |> Encode.list), Argument.optional "peopleIds" filledInOptionals.peopleIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "people" filledInOptionals.people (Api.InputObject.encodeSpeciespeoplePerson |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateSpecies" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]) object_ (identity >> Decode.nullable)


type alias UpdateStarshipOptionalArguments =
    { cargoCapacity : OptionalArgument Float
    , class : OptionalArgument String
    , consumables : OptionalArgument String
    , costInCredits : OptionalArgument Float
    , crew : OptionalArgument Int
    , hyperdriveRating : OptionalArgument Float
    , isPublished : OptionalArgument Bool
    , length : OptionalArgument Float
    , manufacturer : OptionalArgument (List String)
    , maxAtmospheringSpeed : OptionalArgument Int
    , mglt : OptionalArgument Int
    , name : OptionalArgument String
    , passengers : OptionalArgument Int
    , filmsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , films : OptionalArgument (List Api.InputObject.StarshipfilmsFilm)
    , pilotsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , pilots : OptionalArgument (List Api.InputObject.StarshippilotsPerson)
    }


type alias UpdateStarshipRequiredArguments =
    { id : Api.ScalarCodecs.Id }


{-|

  - cargoCapacity - The maximum number of kilograms that this starship can transport.
  - class - The class of this starship, such as "Starfighter" or "Deep Space Mobile Battlestation"
  - consumables - The maximum length of time that this starship can provide consumables for its entire crew without having to resupply.
  - costInCredits - The cost of this starship new, in galactic credits.
  - crew - The number of personnel needed to run or pilot this starship.
  - hyperdriveRating - The class of this starships hyperdrive.
  - isPublished - indicates if the record is published
  - length - The length of this starship in meters.
  - manufacturer - The manufacturer of this starship.
  - maxAtmospheringSpeed - The maximum speed of this starship in the atmosphere. null if this starship is incapable of atmospheric flight.
  - mglt - The Maximum number of Megalights this starship can travel in a standard hour. A "Megalight" is a standard unit of distance and has never been defined before within the Star Wars universe.
  - name - The name of this starship. The common name, such as "Death Star".
  - passengers - The number of non-essential people this starship can transport.

-}
updateStarship : (UpdateStarshipOptionalArguments -> UpdateStarshipOptionalArguments) -> UpdateStarshipRequiredArguments -> SelectionSet decodesTo Api.Object.Starship -> SelectionSet (Maybe decodesTo) RootMutation
updateStarship fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { cargoCapacity = Absent, class = Absent, consumables = Absent, costInCredits = Absent, crew = Absent, hyperdriveRating = Absent, isPublished = Absent, length = Absent, manufacturer = Absent, maxAtmospheringSpeed = Absent, mglt = Absent, name = Absent, passengers = Absent, filmsIds = Absent, films = Absent, pilotsIds = Absent, pilots = Absent }

        optionalArgs =
            [ Argument.optional "cargoCapacity" filledInOptionals.cargoCapacity Encode.float, Argument.optional "class" filledInOptionals.class Encode.string, Argument.optional "consumables" filledInOptionals.consumables Encode.string, Argument.optional "costInCredits" filledInOptionals.costInCredits Encode.float, Argument.optional "crew" filledInOptionals.crew Encode.int, Argument.optional "hyperdriveRating" filledInOptionals.hyperdriveRating Encode.float, Argument.optional "isPublished" filledInOptionals.isPublished Encode.bool, Argument.optional "length" filledInOptionals.length Encode.float, Argument.optional "manufacturer" filledInOptionals.manufacturer (Encode.string |> Encode.list), Argument.optional "maxAtmospheringSpeed" filledInOptionals.maxAtmospheringSpeed Encode.int, Argument.optional "mglt" filledInOptionals.mglt Encode.int, Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "passengers" filledInOptionals.passengers Encode.int, Argument.optional "filmsIds" filledInOptionals.filmsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "films" filledInOptionals.films (Api.InputObject.encodeStarshipfilmsFilm |> Encode.list), Argument.optional "pilotsIds" filledInOptionals.pilotsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "pilots" filledInOptionals.pilots (Api.InputObject.encodeStarshippilotsPerson |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateStarship" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]) object_ (identity >> Decode.nullable)


type alias UpdateVehicleOptionalArguments =
    { cargoCapacity : OptionalArgument Int
    , class : OptionalArgument String
    , consumables : OptionalArgument String
    , costInCredits : OptionalArgument Int
    , crew : OptionalArgument Int
    , isPublished : OptionalArgument Bool
    , length : OptionalArgument Float
    , manufacturer : OptionalArgument (List String)
    , maxAtmospheringSpeed : OptionalArgument Int
    , model : OptionalArgument String
    , name : OptionalArgument String
    , passengers : OptionalArgument Int
    , filmsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , films : OptionalArgument (List Api.InputObject.VehiclefilmsFilm)
    , pilotsIds : OptionalArgument (List Api.ScalarCodecs.Id)
    , pilots : OptionalArgument (List Api.InputObject.VehiclepilotsPerson)
    }


type alias UpdateVehicleRequiredArguments =
    { id : Api.ScalarCodecs.Id }


{-|

  - cargoCapacity - The maximum number of kilograms that this vehicle can transport.
  - class - The class of this vehicle, such as "Wheeled" or "Repulsorcraft".
  - consumables - The maximum length of time that this vehicle can provide consumables for its entire crew without having to resupply.
  - costInCredits - The cost of this vehicle new, in Galactic Credits.
  - crew - The number of personnel needed to run or pilot this vehicle.
  - isPublished - indicates if the record is published
  - length - The length of this vehicle in meters.
  - manufacturer - The manufacturer of this vehicle.
  - maxAtmospheringSpeed - The maximum speed of this vehicle in the atmosphere.
  - model - The model or official name of this vehicle. Such as "All-Terrain Attack Transport".
  - name - The name of this vehicle. The common name, such as "Sand Crawler" or "Speeder bike".
  - passengers - The number of non-essential people this vehicle can transport.

-}
updateVehicle : (UpdateVehicleOptionalArguments -> UpdateVehicleOptionalArguments) -> UpdateVehicleRequiredArguments -> SelectionSet decodesTo Api.Object.Vehicle -> SelectionSet (Maybe decodesTo) RootMutation
updateVehicle fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { cargoCapacity = Absent, class = Absent, consumables = Absent, costInCredits = Absent, crew = Absent, isPublished = Absent, length = Absent, manufacturer = Absent, maxAtmospheringSpeed = Absent, model = Absent, name = Absent, passengers = Absent, filmsIds = Absent, films = Absent, pilotsIds = Absent, pilots = Absent }

        optionalArgs =
            [ Argument.optional "cargoCapacity" filledInOptionals.cargoCapacity Encode.int, Argument.optional "class" filledInOptionals.class Encode.string, Argument.optional "consumables" filledInOptionals.consumables Encode.string, Argument.optional "costInCredits" filledInOptionals.costInCredits Encode.int, Argument.optional "crew" filledInOptionals.crew Encode.int, Argument.optional "isPublished" filledInOptionals.isPublished Encode.bool, Argument.optional "length" filledInOptionals.length Encode.float, Argument.optional "manufacturer" filledInOptionals.manufacturer (Encode.string |> Encode.list), Argument.optional "maxAtmospheringSpeed" filledInOptionals.maxAtmospheringSpeed Encode.int, Argument.optional "model" filledInOptionals.model Encode.string, Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "passengers" filledInOptionals.passengers Encode.int, Argument.optional "filmsIds" filledInOptionals.filmsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "films" filledInOptionals.films (Api.InputObject.encodeVehiclefilmsFilm |> Encode.list), Argument.optional "pilotsIds" filledInOptionals.pilotsIds ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list), Argument.optional "pilots" filledInOptionals.pilots (Api.InputObject.encodeVehiclepilotsPerson |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateVehicle" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]) object_ (identity >> Decode.nullable)


type alias UpdateOrCreateAssetRequiredArguments =
    { update : Api.InputObject.UpdateAsset
    , create : Api.InputObject.CreateAsset
    }


updateOrCreateAsset : UpdateOrCreateAssetRequiredArguments -> SelectionSet decodesTo Api.Object.Asset -> SelectionSet (Maybe decodesTo) RootMutation
updateOrCreateAsset requiredArgs object_ =
    Object.selectionForCompositeField "updateOrCreateAsset" [ Argument.required "update" requiredArgs.update Api.InputObject.encodeUpdateAsset, Argument.required "create" requiredArgs.create Api.InputObject.encodeCreateAsset ] object_ (identity >> Decode.nullable)


type alias UpdateOrCreateFilmRequiredArguments =
    { update : Api.InputObject.UpdateFilm
    , create : Api.InputObject.CreateFilm
    }


updateOrCreateFilm : UpdateOrCreateFilmRequiredArguments -> SelectionSet decodesTo Api.Object.Film -> SelectionSet (Maybe decodesTo) RootMutation
updateOrCreateFilm requiredArgs object_ =
    Object.selectionForCompositeField "updateOrCreateFilm" [ Argument.required "update" requiredArgs.update Api.InputObject.encodeUpdateFilm, Argument.required "create" requiredArgs.create Api.InputObject.encodeCreateFilm ] object_ (identity >> Decode.nullable)


type alias UpdateOrCreatePersonRequiredArguments =
    { update : Api.InputObject.UpdatePerson
    , create : Api.InputObject.CreatePerson
    }


updateOrCreatePerson : UpdateOrCreatePersonRequiredArguments -> SelectionSet decodesTo Api.Object.Person -> SelectionSet (Maybe decodesTo) RootMutation
updateOrCreatePerson requiredArgs object_ =
    Object.selectionForCompositeField "updateOrCreatePerson" [ Argument.required "update" requiredArgs.update Api.InputObject.encodeUpdatePerson, Argument.required "create" requiredArgs.create Api.InputObject.encodeCreatePerson ] object_ (identity >> Decode.nullable)


type alias UpdateOrCreatePlanetRequiredArguments =
    { update : Api.InputObject.UpdatePlanet
    , create : Api.InputObject.CreatePlanet
    }


updateOrCreatePlanet : UpdateOrCreatePlanetRequiredArguments -> SelectionSet decodesTo Api.Object.Planet -> SelectionSet (Maybe decodesTo) RootMutation
updateOrCreatePlanet requiredArgs object_ =
    Object.selectionForCompositeField "updateOrCreatePlanet" [ Argument.required "update" requiredArgs.update Api.InputObject.encodeUpdatePlanet, Argument.required "create" requiredArgs.create Api.InputObject.encodeCreatePlanet ] object_ (identity >> Decode.nullable)


type alias UpdateOrCreateSpeciesRequiredArguments =
    { update : Api.InputObject.UpdateSpecies
    , create : Api.InputObject.CreateSpecies
    }


updateOrCreateSpecies : UpdateOrCreateSpeciesRequiredArguments -> SelectionSet decodesTo Api.Object.Species -> SelectionSet (Maybe decodesTo) RootMutation
updateOrCreateSpecies requiredArgs object_ =
    Object.selectionForCompositeField "updateOrCreateSpecies" [ Argument.required "update" requiredArgs.update Api.InputObject.encodeUpdateSpecies, Argument.required "create" requiredArgs.create Api.InputObject.encodeCreateSpecies ] object_ (identity >> Decode.nullable)


type alias UpdateOrCreateStarshipRequiredArguments =
    { update : Api.InputObject.UpdateStarship
    , create : Api.InputObject.CreateStarship
    }


updateOrCreateStarship : UpdateOrCreateStarshipRequiredArguments -> SelectionSet decodesTo Api.Object.Starship -> SelectionSet (Maybe decodesTo) RootMutation
updateOrCreateStarship requiredArgs object_ =
    Object.selectionForCompositeField "updateOrCreateStarship" [ Argument.required "update" requiredArgs.update Api.InputObject.encodeUpdateStarship, Argument.required "create" requiredArgs.create Api.InputObject.encodeCreateStarship ] object_ (identity >> Decode.nullable)


type alias UpdateOrCreateVehicleRequiredArguments =
    { update : Api.InputObject.UpdateVehicle
    , create : Api.InputObject.CreateVehicle
    }


updateOrCreateVehicle : UpdateOrCreateVehicleRequiredArguments -> SelectionSet decodesTo Api.Object.Vehicle -> SelectionSet (Maybe decodesTo) RootMutation
updateOrCreateVehicle requiredArgs object_ =
    Object.selectionForCompositeField "updateOrCreateVehicle" [ Argument.required "update" requiredArgs.update Api.InputObject.encodeUpdateVehicle, Argument.required "create" requiredArgs.create Api.InputObject.encodeCreateVehicle ] object_ (identity >> Decode.nullable)


type alias DeleteAssetRequiredArguments =
    { id : Api.ScalarCodecs.Id }


deleteAsset : DeleteAssetRequiredArguments -> SelectionSet decodesTo Api.Object.Asset -> SelectionSet (Maybe decodesTo) RootMutation
deleteAsset requiredArgs object_ =
    Object.selectionForCompositeField "deleteAsset" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias DeleteFilmRequiredArguments =
    { id : Api.ScalarCodecs.Id }


deleteFilm : DeleteFilmRequiredArguments -> SelectionSet decodesTo Api.Object.Film -> SelectionSet (Maybe decodesTo) RootMutation
deleteFilm requiredArgs object_ =
    Object.selectionForCompositeField "deleteFilm" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias DeletePersonRequiredArguments =
    { id : Api.ScalarCodecs.Id }


deletePerson : DeletePersonRequiredArguments -> SelectionSet decodesTo Api.Object.Person -> SelectionSet (Maybe decodesTo) RootMutation
deletePerson requiredArgs object_ =
    Object.selectionForCompositeField "deletePerson" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias DeletePlanetRequiredArguments =
    { id : Api.ScalarCodecs.Id }


deletePlanet : DeletePlanetRequiredArguments -> SelectionSet decodesTo Api.Object.Planet -> SelectionSet (Maybe decodesTo) RootMutation
deletePlanet requiredArgs object_ =
    Object.selectionForCompositeField "deletePlanet" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias DeleteSpeciesRequiredArguments =
    { id : Api.ScalarCodecs.Id }


deleteSpecies : DeleteSpeciesRequiredArguments -> SelectionSet decodesTo Api.Object.Species -> SelectionSet (Maybe decodesTo) RootMutation
deleteSpecies requiredArgs object_ =
    Object.selectionForCompositeField "deleteSpecies" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias DeleteStarshipRequiredArguments =
    { id : Api.ScalarCodecs.Id }


deleteStarship : DeleteStarshipRequiredArguments -> SelectionSet decodesTo Api.Object.Starship -> SelectionSet (Maybe decodesTo) RootMutation
deleteStarship requiredArgs object_ =
    Object.selectionForCompositeField "deleteStarship" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias DeleteVehicleRequiredArguments =
    { id : Api.ScalarCodecs.Id }


deleteVehicle : DeleteVehicleRequiredArguments -> SelectionSet decodesTo Api.Object.Vehicle -> SelectionSet (Maybe decodesTo) RootMutation
deleteVehicle requiredArgs object_ =
    Object.selectionForCompositeField "deleteVehicle" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias AddToFilmPlanetsRequiredArguments =
    { planetsPlanetId : Api.ScalarCodecs.Id
    , filmsFilmId : Api.ScalarCodecs.Id
    }


addToFilmPlanets : AddToFilmPlanetsRequiredArguments -> SelectionSet decodesTo Api.Object.AddToFilmPlanetsPayload -> SelectionSet (Maybe decodesTo) RootMutation
addToFilmPlanets requiredArgs object_ =
    Object.selectionForCompositeField "addToFilmPlanets" [ Argument.required "planetsPlanetId" requiredArgs.planetsPlanetId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "filmsFilmId" requiredArgs.filmsFilmId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias AddToFilmSpeciesRequiredArguments =
    { speciesSpeciesId : Api.ScalarCodecs.Id
    , filmsFilmId : Api.ScalarCodecs.Id
    }


addToFilmSpecies : AddToFilmSpeciesRequiredArguments -> SelectionSet decodesTo Api.Object.AddToFilmSpeciesPayload -> SelectionSet (Maybe decodesTo) RootMutation
addToFilmSpecies requiredArgs object_ =
    Object.selectionForCompositeField "addToFilmSpecies" [ Argument.required "speciesSpeciesId" requiredArgs.speciesSpeciesId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "filmsFilmId" requiredArgs.filmsFilmId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias AddToFilmStarshipsRequiredArguments =
    { starshipsStarshipId : Api.ScalarCodecs.Id
    , filmsFilmId : Api.ScalarCodecs.Id
    }


addToFilmStarships : AddToFilmStarshipsRequiredArguments -> SelectionSet decodesTo Api.Object.AddToFilmStarshipsPayload -> SelectionSet (Maybe decodesTo) RootMutation
addToFilmStarships requiredArgs object_ =
    Object.selectionForCompositeField "addToFilmStarships" [ Argument.required "starshipsStarshipId" requiredArgs.starshipsStarshipId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "filmsFilmId" requiredArgs.filmsFilmId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias AddToFilmVehiclesRequiredArguments =
    { vehiclesVehicleId : Api.ScalarCodecs.Id
    , filmsFilmId : Api.ScalarCodecs.Id
    }


addToFilmVehicles : AddToFilmVehiclesRequiredArguments -> SelectionSet decodesTo Api.Object.AddToFilmVehiclesPayload -> SelectionSet (Maybe decodesTo) RootMutation
addToFilmVehicles requiredArgs object_ =
    Object.selectionForCompositeField "addToFilmVehicles" [ Argument.required "vehiclesVehicleId" requiredArgs.vehiclesVehicleId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "filmsFilmId" requiredArgs.filmsFilmId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias AddToPeopleFilmRequiredArguments =
    { filmsFilmId : Api.ScalarCodecs.Id
    , charactersPersonId : Api.ScalarCodecs.Id
    }


addToPeopleFilm : AddToPeopleFilmRequiredArguments -> SelectionSet decodesTo Api.Object.AddToPeopleFilmPayload -> SelectionSet (Maybe decodesTo) RootMutation
addToPeopleFilm requiredArgs object_ =
    Object.selectionForCompositeField "addToPeopleFilm" [ Argument.required "filmsFilmId" requiredArgs.filmsFilmId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "charactersPersonId" requiredArgs.charactersPersonId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias AddToPeoplePlanetRequiredArguments =
    { homeworldPlanetId : Api.ScalarCodecs.Id
    , residentsPersonId : Api.ScalarCodecs.Id
    }


addToPeoplePlanet : AddToPeoplePlanetRequiredArguments -> SelectionSet decodesTo Api.Object.AddToPeoplePlanetPayload -> SelectionSet (Maybe decodesTo) RootMutation
addToPeoplePlanet requiredArgs object_ =
    Object.selectionForCompositeField "addToPeoplePlanet" [ Argument.required "homeworldPlanetId" requiredArgs.homeworldPlanetId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "residentsPersonId" requiredArgs.residentsPersonId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias AddToPeopleSpeciesRequiredArguments =
    { speciesSpeciesId : Api.ScalarCodecs.Id
    , peoplePersonId : Api.ScalarCodecs.Id
    }


addToPeopleSpecies : AddToPeopleSpeciesRequiredArguments -> SelectionSet decodesTo Api.Object.AddToPeopleSpeciesPayload -> SelectionSet (Maybe decodesTo) RootMutation
addToPeopleSpecies requiredArgs object_ =
    Object.selectionForCompositeField "addToPeopleSpecies" [ Argument.required "speciesSpeciesId" requiredArgs.speciesSpeciesId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "peoplePersonId" requiredArgs.peoplePersonId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias AddToPeopleStarshipsRequiredArguments =
    { starshipsStarshipId : Api.ScalarCodecs.Id
    , pilotsPersonId : Api.ScalarCodecs.Id
    }


addToPeopleStarships : AddToPeopleStarshipsRequiredArguments -> SelectionSet decodesTo Api.Object.AddToPeopleStarshipsPayload -> SelectionSet (Maybe decodesTo) RootMutation
addToPeopleStarships requiredArgs object_ =
    Object.selectionForCompositeField "addToPeopleStarships" [ Argument.required "starshipsStarshipId" requiredArgs.starshipsStarshipId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "pilotsPersonId" requiredArgs.pilotsPersonId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias AddToPeopleVehiclesRequiredArguments =
    { vehiclesVehicleId : Api.ScalarCodecs.Id
    , pilotsPersonId : Api.ScalarCodecs.Id
    }


addToPeopleVehicles : AddToPeopleVehiclesRequiredArguments -> SelectionSet decodesTo Api.Object.AddToPeopleVehiclesPayload -> SelectionSet (Maybe decodesTo) RootMutation
addToPeopleVehicles requiredArgs object_ =
    Object.selectionForCompositeField "addToPeopleVehicles" [ Argument.required "vehiclesVehicleId" requiredArgs.vehiclesVehicleId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "pilotsPersonId" requiredArgs.pilotsPersonId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias RemoveFromFilmPlanetsRequiredArguments =
    { planetsPlanetId : Api.ScalarCodecs.Id
    , filmsFilmId : Api.ScalarCodecs.Id
    }


removeFromFilmPlanets : RemoveFromFilmPlanetsRequiredArguments -> SelectionSet decodesTo Api.Object.RemoveFromFilmPlanetsPayload -> SelectionSet (Maybe decodesTo) RootMutation
removeFromFilmPlanets requiredArgs object_ =
    Object.selectionForCompositeField "removeFromFilmPlanets" [ Argument.required "planetsPlanetId" requiredArgs.planetsPlanetId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "filmsFilmId" requiredArgs.filmsFilmId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias RemoveFromFilmSpeciesRequiredArguments =
    { speciesSpeciesId : Api.ScalarCodecs.Id
    , filmsFilmId : Api.ScalarCodecs.Id
    }


removeFromFilmSpecies : RemoveFromFilmSpeciesRequiredArguments -> SelectionSet decodesTo Api.Object.RemoveFromFilmSpeciesPayload -> SelectionSet (Maybe decodesTo) RootMutation
removeFromFilmSpecies requiredArgs object_ =
    Object.selectionForCompositeField "removeFromFilmSpecies" [ Argument.required "speciesSpeciesId" requiredArgs.speciesSpeciesId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "filmsFilmId" requiredArgs.filmsFilmId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias RemoveFromFilmStarshipsRequiredArguments =
    { starshipsStarshipId : Api.ScalarCodecs.Id
    , filmsFilmId : Api.ScalarCodecs.Id
    }


removeFromFilmStarships : RemoveFromFilmStarshipsRequiredArguments -> SelectionSet decodesTo Api.Object.RemoveFromFilmStarshipsPayload -> SelectionSet (Maybe decodesTo) RootMutation
removeFromFilmStarships requiredArgs object_ =
    Object.selectionForCompositeField "removeFromFilmStarships" [ Argument.required "starshipsStarshipId" requiredArgs.starshipsStarshipId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "filmsFilmId" requiredArgs.filmsFilmId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias RemoveFromFilmVehiclesRequiredArguments =
    { vehiclesVehicleId : Api.ScalarCodecs.Id
    , filmsFilmId : Api.ScalarCodecs.Id
    }


removeFromFilmVehicles : RemoveFromFilmVehiclesRequiredArguments -> SelectionSet decodesTo Api.Object.RemoveFromFilmVehiclesPayload -> SelectionSet (Maybe decodesTo) RootMutation
removeFromFilmVehicles requiredArgs object_ =
    Object.selectionForCompositeField "removeFromFilmVehicles" [ Argument.required "vehiclesVehicleId" requiredArgs.vehiclesVehicleId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "filmsFilmId" requiredArgs.filmsFilmId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias RemoveFromPeopleFilmRequiredArguments =
    { filmsFilmId : Api.ScalarCodecs.Id
    , charactersPersonId : Api.ScalarCodecs.Id
    }


removeFromPeopleFilm : RemoveFromPeopleFilmRequiredArguments -> SelectionSet decodesTo Api.Object.RemoveFromPeopleFilmPayload -> SelectionSet (Maybe decodesTo) RootMutation
removeFromPeopleFilm requiredArgs object_ =
    Object.selectionForCompositeField "removeFromPeopleFilm" [ Argument.required "filmsFilmId" requiredArgs.filmsFilmId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "charactersPersonId" requiredArgs.charactersPersonId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias RemoveFromPeoplePlanetRequiredArguments =
    { homeworldPlanetId : Api.ScalarCodecs.Id
    , residentsPersonId : Api.ScalarCodecs.Id
    }


removeFromPeoplePlanet : RemoveFromPeoplePlanetRequiredArguments -> SelectionSet decodesTo Api.Object.RemoveFromPeoplePlanetPayload -> SelectionSet (Maybe decodesTo) RootMutation
removeFromPeoplePlanet requiredArgs object_ =
    Object.selectionForCompositeField "removeFromPeoplePlanet" [ Argument.required "homeworldPlanetId" requiredArgs.homeworldPlanetId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "residentsPersonId" requiredArgs.residentsPersonId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias RemoveFromPeopleSpeciesRequiredArguments =
    { speciesSpeciesId : Api.ScalarCodecs.Id
    , peoplePersonId : Api.ScalarCodecs.Id
    }


removeFromPeopleSpecies : RemoveFromPeopleSpeciesRequiredArguments -> SelectionSet decodesTo Api.Object.RemoveFromPeopleSpeciesPayload -> SelectionSet (Maybe decodesTo) RootMutation
removeFromPeopleSpecies requiredArgs object_ =
    Object.selectionForCompositeField "removeFromPeopleSpecies" [ Argument.required "speciesSpeciesId" requiredArgs.speciesSpeciesId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "peoplePersonId" requiredArgs.peoplePersonId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias RemoveFromPeopleStarshipsRequiredArguments =
    { starshipsStarshipId : Api.ScalarCodecs.Id
    , pilotsPersonId : Api.ScalarCodecs.Id
    }


removeFromPeopleStarships : RemoveFromPeopleStarshipsRequiredArguments -> SelectionSet decodesTo Api.Object.RemoveFromPeopleStarshipsPayload -> SelectionSet (Maybe decodesTo) RootMutation
removeFromPeopleStarships requiredArgs object_ =
    Object.selectionForCompositeField "removeFromPeopleStarships" [ Argument.required "starshipsStarshipId" requiredArgs.starshipsStarshipId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "pilotsPersonId" requiredArgs.pilotsPersonId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias RemoveFromPeopleVehiclesRequiredArguments =
    { vehiclesVehicleId : Api.ScalarCodecs.Id
    , pilotsPersonId : Api.ScalarCodecs.Id
    }


removeFromPeopleVehicles : RemoveFromPeopleVehiclesRequiredArguments -> SelectionSet decodesTo Api.Object.RemoveFromPeopleVehiclesPayload -> SelectionSet (Maybe decodesTo) RootMutation
removeFromPeopleVehicles requiredArgs object_ =
    Object.selectionForCompositeField "removeFromPeopleVehicles" [ Argument.required "vehiclesVehicleId" requiredArgs.vehiclesVehicleId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "pilotsPersonId" requiredArgs.pilotsPersonId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias InvokeFunctionRequiredArguments =
    { input : Api.InputObject.InvokeFunctionInput }


invokeFunction : InvokeFunctionRequiredArguments -> SelectionSet decodesTo Api.Object.InvokeFunctionPayload -> SelectionSet (Maybe decodesTo) RootMutation
invokeFunction requiredArgs object_ =
    Object.selectionForCompositeField "invokeFunction" [ Argument.required "input" requiredArgs.input Api.InputObject.encodeInvokeFunctionInput ] object_ (identity >> Decode.nullable)
