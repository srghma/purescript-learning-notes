-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Query exposing (..)

import Api.Enum.AssetOrderBy
import Api.Enum.FilmOrderBy
import Api.Enum.PersonOrderBy
import Api.Enum.PlanetOrderBy
import Api.Enum.SpeciesOrderBy
import Api.Enum.StarshipOrderBy
import Api.Enum.VehicleOrderBy
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias AllAssetsOptionalArguments =
    { filter : OptionalArgument Api.InputObject.AssetFilter
    , orderBy : OptionalArgument Api.Enum.AssetOrderBy.AssetOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
allAssets : (AllAssetsOptionalArguments -> AllAssetsOptionalArguments) -> SelectionSet decodesTo Api.Object.Asset -> SelectionSet (List decodesTo) RootQuery
allAssets fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeAssetFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.AssetOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allAssets" optionalArgs object_ (identity >> Decode.list)


type alias AllFilmsOptionalArguments =
    { filter : OptionalArgument Api.InputObject.FilmFilter
    , orderBy : OptionalArgument Api.Enum.FilmOrderBy.FilmOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
allFilms : (AllFilmsOptionalArguments -> AllFilmsOptionalArguments) -> SelectionSet decodesTo Api.Object.Film -> SelectionSet (List decodesTo) RootQuery
allFilms fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeFilmFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.FilmOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allFilms" optionalArgs object_ (identity >> Decode.list)


type alias AllPersonsOptionalArguments =
    { filter : OptionalArgument Api.InputObject.PersonFilter
    , orderBy : OptionalArgument Api.Enum.PersonOrderBy.PersonOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
allPersons : (AllPersonsOptionalArguments -> AllPersonsOptionalArguments) -> SelectionSet decodesTo Api.Object.Person -> SelectionSet (List decodesTo) RootQuery
allPersons fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodePersonFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.PersonOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allPersons" optionalArgs object_ (identity >> Decode.list)


type alias AllPlanetsOptionalArguments =
    { filter : OptionalArgument Api.InputObject.PlanetFilter
    , orderBy : OptionalArgument Api.Enum.PlanetOrderBy.PlanetOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
allPlanets : (AllPlanetsOptionalArguments -> AllPlanetsOptionalArguments) -> SelectionSet decodesTo Api.Object.Planet -> SelectionSet (List decodesTo) RootQuery
allPlanets fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodePlanetFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.PlanetOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allPlanets" optionalArgs object_ (identity >> Decode.list)


type alias AllSpeciesOptionalArguments =
    { filter : OptionalArgument Api.InputObject.SpeciesFilter
    , orderBy : OptionalArgument Api.Enum.SpeciesOrderBy.SpeciesOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
allSpecies : (AllSpeciesOptionalArguments -> AllSpeciesOptionalArguments) -> SelectionSet decodesTo Api.Object.Species -> SelectionSet (List decodesTo) RootQuery
allSpecies fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeSpeciesFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.SpeciesOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allSpecies" optionalArgs object_ (identity >> Decode.list)


type alias AllStarshipsOptionalArguments =
    { filter : OptionalArgument Api.InputObject.StarshipFilter
    , orderBy : OptionalArgument Api.Enum.StarshipOrderBy.StarshipOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
allStarships : (AllStarshipsOptionalArguments -> AllStarshipsOptionalArguments) -> SelectionSet decodesTo Api.Object.Starship -> SelectionSet (List decodesTo) RootQuery
allStarships fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeStarshipFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.StarshipOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allStarships" optionalArgs object_ (identity >> Decode.list)


type alias AllVehiclesOptionalArguments =
    { filter : OptionalArgument Api.InputObject.VehicleFilter
    , orderBy : OptionalArgument Api.Enum.VehicleOrderBy.VehicleOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
allVehicles : (AllVehiclesOptionalArguments -> AllVehiclesOptionalArguments) -> SelectionSet decodesTo Api.Object.Vehicle -> SelectionSet (List decodesTo) RootQuery
allVehicles fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeVehicleFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.VehicleOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allVehicles" optionalArgs object_ (identity >> Decode.list)


type alias AllAssetsMetaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.AssetFilter
    , orderBy : OptionalArgument Api.Enum.AssetOrderBy.AssetOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
allAssetsMeta_ : (AllAssetsMetaOptionalArguments -> AllAssetsMetaOptionalArguments) -> SelectionSet decodesTo Api.Object.QueryMeta_ -> SelectionSet decodesTo RootQuery
allAssetsMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeAssetFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.AssetOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_allAssetsMeta" optionalArgs object_ identity


type alias AllFilmsMetaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.FilmFilter
    , orderBy : OptionalArgument Api.Enum.FilmOrderBy.FilmOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
allFilmsMeta_ : (AllFilmsMetaOptionalArguments -> AllFilmsMetaOptionalArguments) -> SelectionSet decodesTo Api.Object.QueryMeta_ -> SelectionSet decodesTo RootQuery
allFilmsMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeFilmFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.FilmOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_allFilmsMeta" optionalArgs object_ identity


type alias AllPersonsMetaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.PersonFilter
    , orderBy : OptionalArgument Api.Enum.PersonOrderBy.PersonOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
allPersonsMeta_ : (AllPersonsMetaOptionalArguments -> AllPersonsMetaOptionalArguments) -> SelectionSet decodesTo Api.Object.QueryMeta_ -> SelectionSet decodesTo RootQuery
allPersonsMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodePersonFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.PersonOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_allPersonsMeta" optionalArgs object_ identity


type alias AllPlanetsMetaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.PlanetFilter
    , orderBy : OptionalArgument Api.Enum.PlanetOrderBy.PlanetOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
allPlanetsMeta_ : (AllPlanetsMetaOptionalArguments -> AllPlanetsMetaOptionalArguments) -> SelectionSet decodesTo Api.Object.QueryMeta_ -> SelectionSet decodesTo RootQuery
allPlanetsMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodePlanetFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.PlanetOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_allPlanetsMeta" optionalArgs object_ identity


type alias AllSpeciesMetaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.SpeciesFilter
    , orderBy : OptionalArgument Api.Enum.SpeciesOrderBy.SpeciesOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
allSpeciesMeta_ : (AllSpeciesMetaOptionalArguments -> AllSpeciesMetaOptionalArguments) -> SelectionSet decodesTo Api.Object.QueryMeta_ -> SelectionSet decodesTo RootQuery
allSpeciesMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeSpeciesFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.SpeciesOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_allSpeciesMeta" optionalArgs object_ identity


type alias AllStarshipsMetaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.StarshipFilter
    , orderBy : OptionalArgument Api.Enum.StarshipOrderBy.StarshipOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
allStarshipsMeta_ : (AllStarshipsMetaOptionalArguments -> AllStarshipsMetaOptionalArguments) -> SelectionSet decodesTo Api.Object.QueryMeta_ -> SelectionSet decodesTo RootQuery
allStarshipsMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeStarshipFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.StarshipOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_allStarshipsMeta" optionalArgs object_ identity


type alias AllVehiclesMetaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.VehicleFilter
    , orderBy : OptionalArgument Api.Enum.VehicleOrderBy.VehicleOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
allVehiclesMeta_ : (AllVehiclesMetaOptionalArguments -> AllVehiclesMetaOptionalArguments) -> SelectionSet decodesTo Api.Object.QueryMeta_ -> SelectionSet decodesTo RootQuery
allVehiclesMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeVehicleFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.VehicleOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_allVehiclesMeta" optionalArgs object_ identity


type alias AssetOptionalArguments =
    { id : OptionalArgument Api.ScalarCodecs.Id }


{-|

  - id -

-}
asset : (AssetOptionalArguments -> AssetOptionalArguments) -> SelectionSet decodesTo Api.Object.Asset -> SelectionSet (Maybe decodesTo) RootQuery
asset fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { id = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "Asset" optionalArgs object_ (identity >> Decode.nullable)


type alias FilmOptionalArguments =
    { id : OptionalArgument Api.ScalarCodecs.Id
    , title : OptionalArgument String
    }


{-|

  - id -
  - title - The title of this film

-}
film : (FilmOptionalArguments -> FilmOptionalArguments) -> SelectionSet decodesTo Api.Object.Film -> SelectionSet (Maybe decodesTo) RootQuery
film fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { id = Absent, title = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.optional "title" filledInOptionals.title Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "Film" optionalArgs object_ (identity >> Decode.nullable)


type alias PersonOptionalArguments =
    { id : OptionalArgument Api.ScalarCodecs.Id
    , name : OptionalArgument String
    }


{-|

  - id -
  - name - The name of this person.

-}
person : (PersonOptionalArguments -> PersonOptionalArguments) -> SelectionSet decodesTo Api.Object.Person -> SelectionSet (Maybe decodesTo) RootQuery
person fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { id = Absent, name = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.optional "name" filledInOptionals.name Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "Person" optionalArgs object_ (identity >> Decode.nullable)


type alias PlanetOptionalArguments =
    { id : OptionalArgument Api.ScalarCodecs.Id
    , name : OptionalArgument String
    }


{-|

  - id -
  - name - The name of the planet

-}
planet : (PlanetOptionalArguments -> PlanetOptionalArguments) -> SelectionSet decodesTo Api.Object.Planet -> SelectionSet (Maybe decodesTo) RootQuery
planet fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { id = Absent, name = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.optional "name" filledInOptionals.name Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "Planet" optionalArgs object_ (identity >> Decode.nullable)


type alias SpeciesOptionalArguments =
    { id : OptionalArgument Api.ScalarCodecs.Id
    , name : OptionalArgument String
    }


{-|

  - id -
  - name - The name of this species.

-}
species : (SpeciesOptionalArguments -> SpeciesOptionalArguments) -> SelectionSet decodesTo Api.Object.Species -> SelectionSet (Maybe decodesTo) RootQuery
species fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { id = Absent, name = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.optional "name" filledInOptionals.name Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "Species" optionalArgs object_ (identity >> Decode.nullable)


type alias StarshipOptionalArguments =
    { id : OptionalArgument Api.ScalarCodecs.Id
    , name : OptionalArgument String
    }


{-|

  - id -
  - name - The name of this starship. The common name, such as "Death Star".

-}
starship : (StarshipOptionalArguments -> StarshipOptionalArguments) -> SelectionSet decodesTo Api.Object.Starship -> SelectionSet (Maybe decodesTo) RootQuery
starship fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { id = Absent, name = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.optional "name" filledInOptionals.name Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "Starship" optionalArgs object_ (identity >> Decode.nullable)


type alias VehicleOptionalArguments =
    { id : OptionalArgument Api.ScalarCodecs.Id
    , name : OptionalArgument String
    }


{-|

  - id -
  - name - The name of this vehicle. The common name, such as "Sand Crawler" or "Speeder bike".

-}
vehicle : (VehicleOptionalArguments -> VehicleOptionalArguments) -> SelectionSet decodesTo Api.Object.Vehicle -> SelectionSet (Maybe decodesTo) RootQuery
vehicle fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { id = Absent, name = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.optional "name" filledInOptionals.name Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "Vehicle" optionalArgs object_ (identity >> Decode.nullable)


type alias NodeRequiredArguments =
    { id : Api.ScalarCodecs.Id }


{-| Fetches an object given its ID

  - id - The ID of an object

-}
node : NodeRequiredArguments -> SelectionSet decodesTo Api.Interface.Node -> SelectionSet (Maybe decodesTo) RootQuery
node requiredArgs object_ =
    Object.selectionForCompositeField "node" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)
