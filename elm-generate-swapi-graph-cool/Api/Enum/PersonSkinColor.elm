-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.PersonSkinColor exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The skin color of this person.
-}
type PersonSkinColor
    = Unknown
    | Fair
    | Gold
    | White
    | Light
    | Green
    | Greentan
    | Pale
    | Metal
    | Dark
    | Brownmottle
    | Brown
    | Grey
    | Mottledgreen
    | Orange
    | Blue
    | Red
    | Yellow
    | Tan
    | Silver


list : List PersonSkinColor
list =
    [ Unknown, Fair, Gold, White, Light, Green, Greentan, Pale, Metal, Dark, Brownmottle, Brown, Grey, Mottledgreen, Orange, Blue, Red, Yellow, Tan, Silver ]


decoder : Decoder PersonSkinColor
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "UNKNOWN" ->
                        Decode.succeed Unknown

                    "FAIR" ->
                        Decode.succeed Fair

                    "GOLD" ->
                        Decode.succeed Gold

                    "WHITE" ->
                        Decode.succeed White

                    "LIGHT" ->
                        Decode.succeed Light

                    "GREEN" ->
                        Decode.succeed Green

                    "GREENTAN" ->
                        Decode.succeed Greentan

                    "PALE" ->
                        Decode.succeed Pale

                    "METAL" ->
                        Decode.succeed Metal

                    "DARK" ->
                        Decode.succeed Dark

                    "BROWNMOTTLE" ->
                        Decode.succeed Brownmottle

                    "BROWN" ->
                        Decode.succeed Brown

                    "GREY" ->
                        Decode.succeed Grey

                    "MOTTLEDGREEN" ->
                        Decode.succeed Mottledgreen

                    "ORANGE" ->
                        Decode.succeed Orange

                    "BLUE" ->
                        Decode.succeed Blue

                    "RED" ->
                        Decode.succeed Red

                    "YELLOW" ->
                        Decode.succeed Yellow

                    "TAN" ->
                        Decode.succeed Tan

                    "SILVER" ->
                        Decode.succeed Silver

                    _ ->
                        Decode.fail ("Invalid PersonSkinColor type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : PersonSkinColor -> String
toString enum =
    case enum of
        Unknown ->
            "UNKNOWN"

        Fair ->
            "FAIR"

        Gold ->
            "GOLD"

        White ->
            "WHITE"

        Light ->
            "LIGHT"

        Green ->
            "GREEN"

        Greentan ->
            "GREENTAN"

        Pale ->
            "PALE"

        Metal ->
            "METAL"

        Dark ->
            "DARK"

        Brownmottle ->
            "BROWNMOTTLE"

        Brown ->
            "BROWN"

        Grey ->
            "GREY"

        Mottledgreen ->
            "MOTTLEDGREEN"

        Orange ->
            "ORANGE"

        Blue ->
            "BLUE"

        Red ->
            "RED"

        Yellow ->
            "YELLOW"

        Tan ->
            "TAN"

        Silver ->
            "SILVER"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe PersonSkinColor
fromString enumString =
    case enumString of
        "UNKNOWN" ->
            Just Unknown

        "FAIR" ->
            Just Fair

        "GOLD" ->
            Just Gold

        "WHITE" ->
            Just White

        "LIGHT" ->
            Just Light

        "GREEN" ->
            Just Green

        "GREENTAN" ->
            Just Greentan

        "PALE" ->
            Just Pale

        "METAL" ->
            Just Metal

        "DARK" ->
            Just Dark

        "BROWNMOTTLE" ->
            Just Brownmottle

        "BROWN" ->
            Just Brown

        "GREY" ->
            Just Grey

        "MOTTLEDGREEN" ->
            Just Mottledgreen

        "ORANGE" ->
            Just Orange

        "BLUE" ->
            Just Blue

        "RED" ->
            Just Red

        "YELLOW" ->
            Just Yellow

        "TAN" ->
            Just Tan

        "SILVER" ->
            Just Silver

        _ ->
            Nothing
