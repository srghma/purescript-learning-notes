-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.SpeciesEyeColor exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The eye colors for this species, "UNKNOWN" if not known, null if this species does not typically have eyes.
-}
type SpeciesEyeColor
    = Amber
    | Black
    | Blue
    | Brown
    | Gold
    | Green
    | Grey
    | Hazel
    | Indigo
    | Orange
    | Pink
    | Red
    | Silver
    | Unknown
    | Yellow
    | Golden


list : List SpeciesEyeColor
list =
    [ Amber, Black, Blue, Brown, Gold, Green, Grey, Hazel, Indigo, Orange, Pink, Red, Silver, Unknown, Yellow, Golden ]


decoder : Decoder SpeciesEyeColor
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "AMBER" ->
                        Decode.succeed Amber

                    "BLACK" ->
                        Decode.succeed Black

                    "BLUE" ->
                        Decode.succeed Blue

                    "BROWN" ->
                        Decode.succeed Brown

                    "GOLD" ->
                        Decode.succeed Gold

                    "GREEN" ->
                        Decode.succeed Green

                    "GREY" ->
                        Decode.succeed Grey

                    "HAZEL" ->
                        Decode.succeed Hazel

                    "INDIGO" ->
                        Decode.succeed Indigo

                    "ORANGE" ->
                        Decode.succeed Orange

                    "PINK" ->
                        Decode.succeed Pink

                    "RED" ->
                        Decode.succeed Red

                    "SILVER" ->
                        Decode.succeed Silver

                    "UNKNOWN" ->
                        Decode.succeed Unknown

                    "YELLOW" ->
                        Decode.succeed Yellow

                    "GOLDEN" ->
                        Decode.succeed Golden

                    _ ->
                        Decode.fail ("Invalid SpeciesEyeColor type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : SpeciesEyeColor -> String
toString enum =
    case enum of
        Amber ->
            "AMBER"

        Black ->
            "BLACK"

        Blue ->
            "BLUE"

        Brown ->
            "BROWN"

        Gold ->
            "GOLD"

        Green ->
            "GREEN"

        Grey ->
            "GREY"

        Hazel ->
            "HAZEL"

        Indigo ->
            "INDIGO"

        Orange ->
            "ORANGE"

        Pink ->
            "PINK"

        Red ->
            "RED"

        Silver ->
            "SILVER"

        Unknown ->
            "UNKNOWN"

        Yellow ->
            "YELLOW"

        Golden ->
            "GOLDEN"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe SpeciesEyeColor
fromString enumString =
    case enumString of
        "AMBER" ->
            Just Amber

        "BLACK" ->
            Just Black

        "BLUE" ->
            Just Blue

        "BROWN" ->
            Just Brown

        "GOLD" ->
            Just Gold

        "GREEN" ->
            Just Green

        "GREY" ->
            Just Grey

        "HAZEL" ->
            Just Hazel

        "INDIGO" ->
            Just Indigo

        "ORANGE" ->
            Just Orange

        "PINK" ->
            Just Pink

        "RED" ->
            Just Red

        "SILVER" ->
            Just Silver

        "UNKNOWN" ->
            Just Unknown

        "YELLOW" ->
            Just Yellow

        "GOLDEN" ->
            Just Golden

        _ ->
            Nothing
