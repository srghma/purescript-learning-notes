-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.PersonGender exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The gender of this person. Will be "UNKNOWN" if not known or null if the person does not have a gender.
-}
type PersonGender
    = Unknown
    | Male
    | Female
    | Hermaphrodite


list : List PersonGender
list =
    [ Unknown, Male, Female, Hermaphrodite ]


decoder : Decoder PersonGender
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "UNKNOWN" ->
                        Decode.succeed Unknown

                    "MALE" ->
                        Decode.succeed Male

                    "FEMALE" ->
                        Decode.succeed Female

                    "HERMAPHRODITE" ->
                        Decode.succeed Hermaphrodite

                    _ ->
                        Decode.fail ("Invalid PersonGender type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : PersonGender -> String
toString enum =
    case enum of
        Unknown ->
            "UNKNOWN"

        Male ->
            "MALE"

        Female ->
            "FEMALE"

        Hermaphrodite ->
            "HERMAPHRODITE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe PersonGender
fromString enumString =
    case enumString of
        "UNKNOWN" ->
            Just Unknown

        "MALE" ->
            Just Male

        "FEMALE" ->
            Just Female

        "HERMAPHRODITE" ->
            Just Hermaphrodite

        _ ->
            Nothing
