-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.PersonOrderBy exposing (..)

import Json.Decode as Decode exposing (Decoder)


type PersonOrderBy
    = BirthYear_ASC
    | BirthYear_DESC
    | CreatedAt_ASC
    | CreatedAt_DESC
    | Gender_ASC
    | Gender_DESC
    | Height_ASC
    | Height_DESC
    | Id_ASC
    | Id_DESC
    | IsPublished_ASC
    | IsPublished_DESC
    | Mass_ASC
    | Mass_DESC
    | Name_ASC
    | Name_DESC
    | UpdatedAt_ASC
    | UpdatedAt_DESC


list : List PersonOrderBy
list =
    [ BirthYear_ASC, BirthYear_DESC, CreatedAt_ASC, CreatedAt_DESC, Gender_ASC, Gender_DESC, Height_ASC, Height_DESC, Id_ASC, Id_DESC, IsPublished_ASC, IsPublished_DESC, Mass_ASC, Mass_DESC, Name_ASC, Name_DESC, UpdatedAt_ASC, UpdatedAt_DESC ]


decoder : Decoder PersonOrderBy
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "birthYear_ASC" ->
                        Decode.succeed BirthYear_ASC

                    "birthYear_DESC" ->
                        Decode.succeed BirthYear_DESC

                    "createdAt_ASC" ->
                        Decode.succeed CreatedAt_ASC

                    "createdAt_DESC" ->
                        Decode.succeed CreatedAt_DESC

                    "gender_ASC" ->
                        Decode.succeed Gender_ASC

                    "gender_DESC" ->
                        Decode.succeed Gender_DESC

                    "height_ASC" ->
                        Decode.succeed Height_ASC

                    "height_DESC" ->
                        Decode.succeed Height_DESC

                    "id_ASC" ->
                        Decode.succeed Id_ASC

                    "id_DESC" ->
                        Decode.succeed Id_DESC

                    "isPublished_ASC" ->
                        Decode.succeed IsPublished_ASC

                    "isPublished_DESC" ->
                        Decode.succeed IsPublished_DESC

                    "mass_ASC" ->
                        Decode.succeed Mass_ASC

                    "mass_DESC" ->
                        Decode.succeed Mass_DESC

                    "name_ASC" ->
                        Decode.succeed Name_ASC

                    "name_DESC" ->
                        Decode.succeed Name_DESC

                    "updatedAt_ASC" ->
                        Decode.succeed UpdatedAt_ASC

                    "updatedAt_DESC" ->
                        Decode.succeed UpdatedAt_DESC

                    _ ->
                        Decode.fail ("Invalid PersonOrderBy type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : PersonOrderBy -> String
toString enum =
    case enum of
        BirthYear_ASC ->
            "birthYear_ASC"

        BirthYear_DESC ->
            "birthYear_DESC"

        CreatedAt_ASC ->
            "createdAt_ASC"

        CreatedAt_DESC ->
            "createdAt_DESC"

        Gender_ASC ->
            "gender_ASC"

        Gender_DESC ->
            "gender_DESC"

        Height_ASC ->
            "height_ASC"

        Height_DESC ->
            "height_DESC"

        Id_ASC ->
            "id_ASC"

        Id_DESC ->
            "id_DESC"

        IsPublished_ASC ->
            "isPublished_ASC"

        IsPublished_DESC ->
            "isPublished_DESC"

        Mass_ASC ->
            "mass_ASC"

        Mass_DESC ->
            "mass_DESC"

        Name_ASC ->
            "name_ASC"

        Name_DESC ->
            "name_DESC"

        UpdatedAt_ASC ->
            "updatedAt_ASC"

        UpdatedAt_DESC ->
            "updatedAt_DESC"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe PersonOrderBy
fromString enumString =
    case enumString of
        "birthYear_ASC" ->
            Just BirthYear_ASC

        "birthYear_DESC" ->
            Just BirthYear_DESC

        "createdAt_ASC" ->
            Just CreatedAt_ASC

        "createdAt_DESC" ->
            Just CreatedAt_DESC

        "gender_ASC" ->
            Just Gender_ASC

        "gender_DESC" ->
            Just Gender_DESC

        "height_ASC" ->
            Just Height_ASC

        "height_DESC" ->
            Just Height_DESC

        "id_ASC" ->
            Just Id_ASC

        "id_DESC" ->
            Just Id_DESC

        "isPublished_ASC" ->
            Just IsPublished_ASC

        "isPublished_DESC" ->
            Just IsPublished_DESC

        "mass_ASC" ->
            Just Mass_ASC

        "mass_DESC" ->
            Just Mass_DESC

        "name_ASC" ->
            Just Name_ASC

        "name_DESC" ->
            Just Name_DESC

        "updatedAt_ASC" ->
            Just UpdatedAt_ASC

        "updatedAt_DESC" ->
            Just UpdatedAt_DESC

        _ ->
            Nothing
