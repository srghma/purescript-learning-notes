-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.SpeciesHairColor exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The hair colors for this species, "UNKNOWN" if not known, null if this species does not typically have hairs.
-}
type SpeciesHairColor
    = Unknown
    | Brown
    | White
    | Red
    | Black
    | Blonde


list : List SpeciesHairColor
list =
    [ Unknown, Brown, White, Red, Black, Blonde ]


decoder : Decoder SpeciesHairColor
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "UNKNOWN" ->
                        Decode.succeed Unknown

                    "BROWN" ->
                        Decode.succeed Brown

                    "WHITE" ->
                        Decode.succeed White

                    "RED" ->
                        Decode.succeed Red

                    "BLACK" ->
                        Decode.succeed Black

                    "BLONDE" ->
                        Decode.succeed Blonde

                    _ ->
                        Decode.fail ("Invalid SpeciesHairColor type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : SpeciesHairColor -> String
toString enum =
    case enum of
        Unknown ->
            "UNKNOWN"

        Brown ->
            "BROWN"

        White ->
            "WHITE"

        Red ->
            "RED"

        Black ->
            "BLACK"

        Blonde ->
            "BLONDE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe SpeciesHairColor
fromString enumString =
    case enumString of
        "UNKNOWN" ->
            Just Unknown

        "BROWN" ->
            Just Brown

        "WHITE" ->
            Just White

        "RED" ->
            Just Red

        "BLACK" ->
            Just Black

        "BLONDE" ->
            Just Blonde

        _ ->
            Nothing
