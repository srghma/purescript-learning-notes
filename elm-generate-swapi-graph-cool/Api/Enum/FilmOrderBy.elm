-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.FilmOrderBy exposing (..)

import Json.Decode as Decode exposing (Decoder)


type FilmOrderBy
    = CreatedAt_ASC
    | CreatedAt_DESC
    | Director_ASC
    | Director_DESC
    | EpisodeId_ASC
    | EpisodeId_DESC
    | Id_ASC
    | Id_DESC
    | IsPublished_ASC
    | IsPublished_DESC
    | OpeningCrawl_ASC
    | OpeningCrawl_DESC
    | ReleaseDate_ASC
    | ReleaseDate_DESC
    | Title_ASC
    | Title_DESC
    | UpdatedAt_ASC
    | UpdatedAt_DESC


list : List FilmOrderBy
list =
    [ CreatedAt_ASC, CreatedAt_DESC, Director_ASC, Director_DESC, EpisodeId_ASC, EpisodeId_DESC, Id_ASC, Id_DESC, IsPublished_ASC, IsPublished_DESC, OpeningCrawl_ASC, OpeningCrawl_DESC, ReleaseDate_ASC, ReleaseDate_DESC, Title_ASC, Title_DESC, UpdatedAt_ASC, UpdatedAt_DESC ]


decoder : Decoder FilmOrderBy
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "createdAt_ASC" ->
                        Decode.succeed CreatedAt_ASC

                    "createdAt_DESC" ->
                        Decode.succeed CreatedAt_DESC

                    "director_ASC" ->
                        Decode.succeed Director_ASC

                    "director_DESC" ->
                        Decode.succeed Director_DESC

                    "episodeId_ASC" ->
                        Decode.succeed EpisodeId_ASC

                    "episodeId_DESC" ->
                        Decode.succeed EpisodeId_DESC

                    "id_ASC" ->
                        Decode.succeed Id_ASC

                    "id_DESC" ->
                        Decode.succeed Id_DESC

                    "isPublished_ASC" ->
                        Decode.succeed IsPublished_ASC

                    "isPublished_DESC" ->
                        Decode.succeed IsPublished_DESC

                    "openingCrawl_ASC" ->
                        Decode.succeed OpeningCrawl_ASC

                    "openingCrawl_DESC" ->
                        Decode.succeed OpeningCrawl_DESC

                    "releaseDate_ASC" ->
                        Decode.succeed ReleaseDate_ASC

                    "releaseDate_DESC" ->
                        Decode.succeed ReleaseDate_DESC

                    "title_ASC" ->
                        Decode.succeed Title_ASC

                    "title_DESC" ->
                        Decode.succeed Title_DESC

                    "updatedAt_ASC" ->
                        Decode.succeed UpdatedAt_ASC

                    "updatedAt_DESC" ->
                        Decode.succeed UpdatedAt_DESC

                    _ ->
                        Decode.fail ("Invalid FilmOrderBy type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : FilmOrderBy -> String
toString enum =
    case enum of
        CreatedAt_ASC ->
            "createdAt_ASC"

        CreatedAt_DESC ->
            "createdAt_DESC"

        Director_ASC ->
            "director_ASC"

        Director_DESC ->
            "director_DESC"

        EpisodeId_ASC ->
            "episodeId_ASC"

        EpisodeId_DESC ->
            "episodeId_DESC"

        Id_ASC ->
            "id_ASC"

        Id_DESC ->
            "id_DESC"

        IsPublished_ASC ->
            "isPublished_ASC"

        IsPublished_DESC ->
            "isPublished_DESC"

        OpeningCrawl_ASC ->
            "openingCrawl_ASC"

        OpeningCrawl_DESC ->
            "openingCrawl_DESC"

        ReleaseDate_ASC ->
            "releaseDate_ASC"

        ReleaseDate_DESC ->
            "releaseDate_DESC"

        Title_ASC ->
            "title_ASC"

        Title_DESC ->
            "title_DESC"

        UpdatedAt_ASC ->
            "updatedAt_ASC"

        UpdatedAt_DESC ->
            "updatedAt_DESC"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe FilmOrderBy
fromString enumString =
    case enumString of
        "createdAt_ASC" ->
            Just CreatedAt_ASC

        "createdAt_DESC" ->
            Just CreatedAt_DESC

        "director_ASC" ->
            Just Director_ASC

        "director_DESC" ->
            Just Director_DESC

        "episodeId_ASC" ->
            Just EpisodeId_ASC

        "episodeId_DESC" ->
            Just EpisodeId_DESC

        "id_ASC" ->
            Just Id_ASC

        "id_DESC" ->
            Just Id_DESC

        "isPublished_ASC" ->
            Just IsPublished_ASC

        "isPublished_DESC" ->
            Just IsPublished_DESC

        "openingCrawl_ASC" ->
            Just OpeningCrawl_ASC

        "openingCrawl_DESC" ->
            Just OpeningCrawl_DESC

        "releaseDate_ASC" ->
            Just ReleaseDate_ASC

        "releaseDate_DESC" ->
            Just ReleaseDate_DESC

        "title_ASC" ->
            Just Title_ASC

        "title_DESC" ->
            Just Title_DESC

        "updatedAt_ASC" ->
            Just UpdatedAt_ASC

        "updatedAt_DESC" ->
            Just UpdatedAt_DESC

        _ ->
            Nothing
