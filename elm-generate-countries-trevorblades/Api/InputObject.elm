-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.InputObject exposing (..)

import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildContinentFilterInput : (ContinentFilterInputOptionalFields -> ContinentFilterInputOptionalFields) -> ContinentFilterInput
buildContinentFilterInput fillOptionals =
    let
        optionals =
            fillOptionals
                { code = Absent }
    in
    { code = optionals.code }


type alias ContinentFilterInputOptionalFields =
    { code : OptionalArgument StringQueryOperatorInput }


{-| Type for the ContinentFilterInput input object.
-}
type alias ContinentFilterInput =
    { code : OptionalArgument StringQueryOperatorInput }


{-| Encode a ContinentFilterInput into a value that can be used as an argument.
-}
encodeContinentFilterInput : ContinentFilterInput -> Value
encodeContinentFilterInput input =
    Encode.maybeObject
        [ ( "code", encodeStringQueryOperatorInput |> Encode.optional input.code ) ]


buildCountryFilterInput : (CountryFilterInputOptionalFields -> CountryFilterInputOptionalFields) -> CountryFilterInput
buildCountryFilterInput fillOptionals =
    let
        optionals =
            fillOptionals
                { code = Absent, currency = Absent, continent = Absent }
    in
    { code = optionals.code, currency = optionals.currency, continent = optionals.continent }


type alias CountryFilterInputOptionalFields =
    { code : OptionalArgument StringQueryOperatorInput
    , currency : OptionalArgument StringQueryOperatorInput
    , continent : OptionalArgument StringQueryOperatorInput
    }


{-| Type for the CountryFilterInput input object.
-}
type alias CountryFilterInput =
    { code : OptionalArgument StringQueryOperatorInput
    , currency : OptionalArgument StringQueryOperatorInput
    , continent : OptionalArgument StringQueryOperatorInput
    }


{-| Encode a CountryFilterInput into a value that can be used as an argument.
-}
encodeCountryFilterInput : CountryFilterInput -> Value
encodeCountryFilterInput input =
    Encode.maybeObject
        [ ( "code", encodeStringQueryOperatorInput |> Encode.optional input.code ), ( "currency", encodeStringQueryOperatorInput |> Encode.optional input.currency ), ( "continent", encodeStringQueryOperatorInput |> Encode.optional input.continent ) ]


buildLanguageFilterInput : (LanguageFilterInputOptionalFields -> LanguageFilterInputOptionalFields) -> LanguageFilterInput
buildLanguageFilterInput fillOptionals =
    let
        optionals =
            fillOptionals
                { code = Absent }
    in
    { code = optionals.code }


type alias LanguageFilterInputOptionalFields =
    { code : OptionalArgument StringQueryOperatorInput }


{-| Type for the LanguageFilterInput input object.
-}
type alias LanguageFilterInput =
    { code : OptionalArgument StringQueryOperatorInput }


{-| Encode a LanguageFilterInput into a value that can be used as an argument.
-}
encodeLanguageFilterInput : LanguageFilterInput -> Value
encodeLanguageFilterInput input =
    Encode.maybeObject
        [ ( "code", encodeStringQueryOperatorInput |> Encode.optional input.code ) ]


buildStringQueryOperatorInput : (StringQueryOperatorInputOptionalFields -> StringQueryOperatorInputOptionalFields) -> StringQueryOperatorInput
buildStringQueryOperatorInput fillOptionals =
    let
        optionals =
            fillOptionals
                { eq = Absent, ne = Absent, in_ = Absent, nin = Absent, regex = Absent, glob = Absent }
    in
    { eq = optionals.eq, ne = optionals.ne, in_ = optionals.in_, nin = optionals.nin, regex = optionals.regex, glob = optionals.glob }


type alias StringQueryOperatorInputOptionalFields =
    { eq : OptionalArgument String
    , ne : OptionalArgument String
    , in_ : OptionalArgument (List (Maybe String))
    , nin : OptionalArgument (List (Maybe String))
    , regex : OptionalArgument String
    , glob : OptionalArgument String
    }


{-| Type for the StringQueryOperatorInput input object.
-}
type alias StringQueryOperatorInput =
    { eq : OptionalArgument String
    , ne : OptionalArgument String
    , in_ : OptionalArgument (List (Maybe String))
    , nin : OptionalArgument (List (Maybe String))
    , regex : OptionalArgument String
    , glob : OptionalArgument String
    }


{-| Encode a StringQueryOperatorInput into a value that can be used as an argument.
-}
encodeStringQueryOperatorInput : StringQueryOperatorInput -> Value
encodeStringQueryOperatorInput input =
    Encode.maybeObject
        [ ( "eq", Encode.string |> Encode.optional input.eq ), ( "ne", Encode.string |> Encode.optional input.ne ), ( "in", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.in_ ), ( "nin", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.nin ), ( "regex", Encode.string |> Encode.optional input.regex ), ( "glob", Encode.string |> Encode.optional input.glob ) ]
