-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Query exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias ContinentsOptionalArguments =
    { filter : OptionalArgument Api.InputObject.ContinentFilterInput }


{-|

  - filter -

-}
continents : (ContinentsOptionalArguments -> ContinentsOptionalArguments) -> SelectionSet decodesTo Api.Object.Continent -> SelectionSet (List decodesTo) RootQuery
continents fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeContinentFilterInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "continents" optionalArgs object_ (identity >> Decode.list)


type alias ContinentRequiredArguments =
    { code : Api.ScalarCodecs.Id }


{-|

  - code -

-}
continent : ContinentRequiredArguments -> SelectionSet decodesTo Api.Object.Continent -> SelectionSet (Maybe decodesTo) RootQuery
continent requiredArgs object_ =
    Object.selectionForCompositeField "continent" [ Argument.required "code" requiredArgs.code (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias CountriesOptionalArguments =
    { filter : OptionalArgument Api.InputObject.CountryFilterInput }


{-|

  - filter -

-}
countries : (CountriesOptionalArguments -> CountriesOptionalArguments) -> SelectionSet decodesTo Api.Object.Country -> SelectionSet (List decodesTo) RootQuery
countries fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeCountryFilterInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "countries" optionalArgs object_ (identity >> Decode.list)


type alias CountryRequiredArguments =
    { code : Api.ScalarCodecs.Id }


{-|

  - code -

-}
country : CountryRequiredArguments -> SelectionSet decodesTo Api.Object.Country -> SelectionSet (Maybe decodesTo) RootQuery
country requiredArgs object_ =
    Object.selectionForCompositeField "country" [ Argument.required "code" requiredArgs.code (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias LanguagesOptionalArguments =
    { filter : OptionalArgument Api.InputObject.LanguageFilterInput }


{-|

  - filter -

-}
languages : (LanguagesOptionalArguments -> LanguagesOptionalArguments) -> SelectionSet decodesTo Api.Object.Language -> SelectionSet (List decodesTo) RootQuery
languages fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeLanguageFilterInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "languages" optionalArgs object_ (identity >> Decode.list)


type alias LanguageRequiredArguments =
    { code : Api.ScalarCodecs.Id }


{-|

  - code -

-}
language : LanguageRequiredArguments -> SelectionSet decodesTo Api.Object.Language -> SelectionSet (Maybe decodesTo) RootQuery
language requiredArgs object_ =
    Object.selectionForCompositeField "language" [ Argument.required "code" requiredArgs.code (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)
